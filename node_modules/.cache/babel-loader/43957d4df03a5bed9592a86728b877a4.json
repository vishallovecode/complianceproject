{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport { dep, KeyTrie } from 'optimism';\nimport { equal } from '@wry/equality';\nimport { isReference, makeReference, DeepMerger, maybeDeepFreeze, canUseWeakMap } from \"../../utilities/index.js\";\nimport { hasOwn, fieldNameFromStoreName } from \"./helpers.js\";\nvar DELETE = Object.create(null);\n\nvar delModifier = function delModifier() {\n  return DELETE;\n};\n\nvar INVALIDATE = Object.create(null);\n\nvar EntityStore = function () {\n  function EntityStore(policies, group) {\n    var _this = this;\n\n    this.policies = policies;\n    this.group = group;\n    this.data = Object.create(null);\n    this.rootIds = Object.create(null);\n    this.refs = Object.create(null);\n\n    this.getFieldValue = function (objectOrReference, storeFieldName) {\n      return maybeDeepFreeze(isReference(objectOrReference) ? _this.get(objectOrReference.__ref, storeFieldName) : objectOrReference && objectOrReference[storeFieldName]);\n    };\n\n    this.canRead = function (objOrRef) {\n      return isReference(objOrRef) ? _this.has(objOrRef.__ref) : typeof objOrRef === \"object\";\n    };\n\n    this.toReference = function (objOrIdOrRef, mergeIntoStore) {\n      if (typeof objOrIdOrRef === \"string\") {\n        return makeReference(objOrIdOrRef);\n      }\n\n      if (isReference(objOrIdOrRef)) {\n        return objOrIdOrRef;\n      }\n\n      var id = _this.policies.identify(objOrIdOrRef)[0];\n\n      if (id) {\n        var ref = makeReference(id);\n\n        if (mergeIntoStore) {\n          _this.merge(id, objOrIdOrRef);\n        }\n\n        return ref;\n      }\n    };\n  }\n\n  EntityStore.prototype.toObject = function () {\n    return __assign({}, this.data);\n  };\n\n  EntityStore.prototype.has = function (dataId) {\n    return this.lookup(dataId, true) !== void 0;\n  };\n\n  EntityStore.prototype.get = function (dataId, fieldName) {\n    this.group.depend(dataId, fieldName);\n\n    if (hasOwn.call(this.data, dataId)) {\n      var storeObject = this.data[dataId];\n\n      if (storeObject && hasOwn.call(storeObject, fieldName)) {\n        return storeObject[fieldName];\n      }\n    }\n\n    if (fieldName === \"__typename\" && hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n      return this.policies.rootTypenamesById[dataId];\n    }\n\n    if (this instanceof Layer) {\n      return this.parent.get(dataId, fieldName);\n    }\n  };\n\n  EntityStore.prototype.lookup = function (dataId, dependOnExistence) {\n    if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n\n    if (hasOwn.call(this.data, dataId)) {\n      return this.data[dataId];\n    }\n\n    if (this instanceof Layer) {\n      return this.parent.lookup(dataId, dependOnExistence);\n    }\n\n    if (this.policies.rootTypenamesById[dataId]) {\n      return Object.create(null);\n    }\n  };\n\n  EntityStore.prototype.merge = function (dataId, incoming) {\n    var _this = this;\n\n    var existing = this.lookup(dataId);\n    var merged = new DeepMerger(storeObjectReconciler).merge(existing, incoming);\n    this.data[dataId] = merged;\n\n    if (merged !== existing) {\n      delete this.refs[dataId];\n\n      if (this.group.caching) {\n        var fieldsToDirty_1 = Object.create(null);\n        if (!existing) fieldsToDirty_1.__exists = 1;\n        Object.keys(incoming).forEach(function (storeFieldName) {\n          if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n            fieldsToDirty_1[storeFieldName] = 1;\n            var fieldName = fieldNameFromStoreName(storeFieldName);\n\n            if (fieldName !== storeFieldName && !_this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n              fieldsToDirty_1[fieldName] = 1;\n            }\n\n            if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {\n              delete merged[storeFieldName];\n            }\n          }\n        });\n        Object.keys(fieldsToDirty_1).forEach(function (fieldName) {\n          return _this.group.dirty(dataId, fieldName);\n        });\n      }\n    }\n  };\n\n  EntityStore.prototype.modify = function (dataId, fields) {\n    var _this = this;\n\n    var storeObject = this.lookup(dataId);\n\n    if (storeObject) {\n      var changedFields_1 = Object.create(null);\n      var needToMerge_1 = false;\n      var allDeleted_1 = true;\n      var sharedDetails_1 = {\n        DELETE: DELETE,\n        INVALIDATE: INVALIDATE,\n        isReference: isReference,\n        toReference: this.toReference,\n        canRead: this.canRead,\n        readField: function readField(fieldNameOrOptions, from) {\n          return _this.policies.readField(typeof fieldNameOrOptions === \"string\" ? {\n            fieldName: fieldNameOrOptions,\n            from: from || makeReference(dataId)\n          } : fieldNameOrOptions, {\n            store: _this\n          });\n        }\n      };\n      Object.keys(storeObject).forEach(function (storeFieldName) {\n        var fieldName = fieldNameFromStoreName(storeFieldName);\n        var fieldValue = storeObject[storeFieldName];\n        if (fieldValue === void 0) return;\n        var modify = typeof fields === \"function\" ? fields : fields[storeFieldName] || fields[fieldName];\n\n        if (modify) {\n          var newValue = modify === delModifier ? DELETE : modify(maybeDeepFreeze(fieldValue), __assign(__assign({}, sharedDetails_1), {\n            fieldName: fieldName,\n            storeFieldName: storeFieldName,\n            storage: _this.getStorage(dataId, storeFieldName)\n          }));\n\n          if (newValue === INVALIDATE) {\n            _this.group.dirty(dataId, storeFieldName);\n          } else {\n            if (newValue === DELETE) newValue = void 0;\n\n            if (newValue !== fieldValue) {\n              changedFields_1[storeFieldName] = newValue;\n              needToMerge_1 = true;\n              fieldValue = newValue;\n            }\n          }\n        }\n\n        if (fieldValue !== void 0) {\n          allDeleted_1 = false;\n        }\n      });\n\n      if (needToMerge_1) {\n        this.merge(dataId, changedFields_1);\n\n        if (allDeleted_1) {\n          if (this instanceof Layer) {\n            this.data[dataId] = void 0;\n          } else {\n            delete this.data[dataId];\n          }\n\n          this.group.dirty(dataId, \"__exists\");\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  EntityStore.prototype.delete = function (dataId, fieldName, args) {\n    var _a;\n\n    var storeObject = this.lookup(dataId);\n\n    if (storeObject) {\n      var typename = this.getFieldValue(storeObject, \"__typename\");\n      var storeFieldName = fieldName && args ? this.policies.getStoreFieldName({\n        typename: typename,\n        fieldName: fieldName,\n        args: args\n      }) : fieldName;\n      return this.modify(dataId, storeFieldName ? (_a = {}, _a[storeFieldName] = delModifier, _a) : delModifier);\n    }\n\n    return false;\n  };\n\n  EntityStore.prototype.evict = function (options) {\n    var evicted = false;\n\n    if (options.id) {\n      if (hasOwn.call(this.data, options.id)) {\n        evicted = this.delete(options.id, options.fieldName, options.args);\n      }\n\n      if (this instanceof Layer) {\n        evicted = this.parent.evict(options) || evicted;\n      }\n\n      if (options.fieldName || evicted) {\n        this.group.dirty(options.id, options.fieldName || \"__exists\");\n      }\n    }\n\n    return evicted;\n  };\n\n  EntityStore.prototype.clear = function () {\n    this.replace(null);\n  };\n\n  EntityStore.prototype.extract = function () {\n    var _this = this;\n\n    var obj = this.toObject();\n    var extraRootIds = [];\n    this.getRootIdSet().forEach(function (id) {\n      if (!hasOwn.call(_this.policies.rootTypenamesById, id)) {\n        extraRootIds.push(id);\n      }\n    });\n\n    if (extraRootIds.length) {\n      obj.__META = {\n        extraRootIds: extraRootIds.sort()\n      };\n    }\n\n    return obj;\n  };\n\n  EntityStore.prototype.replace = function (newData) {\n    var _this = this;\n\n    Object.keys(this.data).forEach(function (dataId) {\n      if (!(newData && hasOwn.call(newData, dataId))) {\n        _this.delete(dataId);\n      }\n    });\n\n    if (newData) {\n      var __META = newData.__META,\n          rest_1 = __rest(newData, [\"__META\"]);\n\n      Object.keys(rest_1).forEach(function (dataId) {\n        _this.merge(dataId, rest_1[dataId]);\n      });\n\n      if (__META) {\n        __META.extraRootIds.forEach(this.retain, this);\n      }\n    }\n  };\n\n  EntityStore.prototype.retain = function (rootId) {\n    return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n  };\n\n  EntityStore.prototype.release = function (rootId) {\n    if (this.rootIds[rootId] > 0) {\n      var count = --this.rootIds[rootId];\n      if (!count) delete this.rootIds[rootId];\n      return count;\n    }\n\n    return 0;\n  };\n\n  EntityStore.prototype.getRootIdSet = function (ids) {\n    if (ids === void 0) {\n      ids = new Set();\n    }\n\n    Object.keys(this.rootIds).forEach(ids.add, ids);\n\n    if (this instanceof Layer) {\n      this.parent.getRootIdSet(ids);\n    } else {\n      Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n    }\n\n    return ids;\n  };\n\n  EntityStore.prototype.gc = function () {\n    var _this = this;\n\n    var ids = this.getRootIdSet();\n    var snapshot = this.toObject();\n    ids.forEach(function (id) {\n      if (hasOwn.call(snapshot, id)) {\n        Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);\n        delete snapshot[id];\n      }\n    });\n    var idsToRemove = Object.keys(snapshot);\n\n    if (idsToRemove.length) {\n      var root_1 = this;\n\n      while (root_1 instanceof Layer) {\n        root_1 = root_1.parent;\n      }\n\n      idsToRemove.forEach(function (id) {\n        return root_1.delete(id);\n      });\n    }\n\n    return idsToRemove;\n  };\n\n  EntityStore.prototype.findChildRefIds = function (dataId) {\n    if (!hasOwn.call(this.refs, dataId)) {\n      var found_1 = this.refs[dataId] = Object.create(null);\n      var workSet_1 = new Set([this.data[dataId]]);\n\n      var canTraverse_1 = function canTraverse_1(obj) {\n        return obj !== null && typeof obj === 'object';\n      };\n\n      workSet_1.forEach(function (obj) {\n        if (isReference(obj)) {\n          found_1[obj.__ref] = true;\n        } else if (canTraverse_1(obj)) {\n          Object.values(obj).filter(canTraverse_1).forEach(workSet_1.add, workSet_1);\n        }\n      });\n    }\n\n    return this.refs[dataId];\n  };\n\n  EntityStore.prototype.makeCacheKey = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return this.group.keyMaker.lookupArray(args);\n  };\n\n  return EntityStore;\n}();\n\nexport { EntityStore };\n\nvar CacheGroup = function () {\n  function CacheGroup(caching) {\n    this.caching = caching;\n    this.d = null;\n    this.keyMaker = new KeyTrie(canUseWeakMap);\n    this.d = caching ? dep() : null;\n  }\n\n  CacheGroup.prototype.depend = function (dataId, storeFieldName) {\n    if (this.d) {\n      this.d(makeDepKey(dataId, storeFieldName));\n      var fieldName = fieldNameFromStoreName(storeFieldName);\n\n      if (fieldName !== storeFieldName) {\n        this.d(makeDepKey(dataId, fieldName));\n      }\n    }\n  };\n\n  CacheGroup.prototype.dirty = function (dataId, storeFieldName) {\n    if (this.d) {\n      this.d.dirty(makeDepKey(dataId, storeFieldName));\n    }\n  };\n\n  return CacheGroup;\n}();\n\nfunction makeDepKey(dataId, storeFieldName) {\n  return storeFieldName + '#' + dataId;\n}\n\n(function (EntityStore) {\n  var Root = function (_super) {\n    __extends(Root, _super);\n\n    function Root(_a) {\n      var policies = _a.policies,\n          _b = _a.resultCaching,\n          resultCaching = _b === void 0 ? true : _b,\n          seed = _a.seed;\n\n      var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;\n\n      _this.storageTrie = new KeyTrie(canUseWeakMap);\n      _this.sharedLayerGroup = new CacheGroup(resultCaching);\n      if (seed) _this.replace(seed);\n      return _this;\n    }\n\n    Root.prototype.addLayer = function (layerId, replay) {\n      return new Layer(layerId, this, replay, this.sharedLayerGroup);\n    };\n\n    Root.prototype.removeLayer = function () {\n      return this;\n    };\n\n    Root.prototype.getStorage = function () {\n      return this.storageTrie.lookupArray(arguments);\n    };\n\n    return Root;\n  }(EntityStore);\n\n  EntityStore.Root = Root;\n})(EntityStore || (EntityStore = {}));\n\nvar Layer = function (_super) {\n  __extends(Layer, _super);\n\n  function Layer(id, parent, replay, group) {\n    var _this = _super.call(this, parent.policies, group) || this;\n\n    _this.id = id;\n    _this.parent = parent;\n    _this.replay = replay;\n    _this.group = group;\n    replay(_this);\n    return _this;\n  }\n\n  Layer.prototype.addLayer = function (layerId, replay) {\n    return new Layer(layerId, this, replay, this.group);\n  };\n\n  Layer.prototype.removeLayer = function (layerId) {\n    var _this = this;\n\n    var parent = this.parent.removeLayer(layerId);\n\n    if (layerId === this.id) {\n      if (this.group.caching) {\n        Object.keys(this.data).forEach(function (dataId) {\n          if (_this.data[dataId] !== parent.lookup(dataId)) {\n            _this.delete(dataId);\n          }\n        });\n      }\n\n      return parent;\n    }\n\n    if (parent === this.parent) return this;\n    return parent.addLayer(this.id, this.replay);\n  };\n\n  Layer.prototype.toObject = function () {\n    return __assign(__assign({}, this.parent.toObject()), this.data);\n  };\n\n  Layer.prototype.findChildRefIds = function (dataId) {\n    var fromParent = this.parent.findChildRefIds(dataId);\n    return hasOwn.call(this.data, dataId) ? __assign(__assign({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;\n  };\n\n  Layer.prototype.getStorage = function () {\n    var p = this.parent;\n\n    while (p.parent) {\n      p = p.parent;\n    }\n\n    return p.getStorage.apply(p, arguments);\n  };\n\n  return Layer;\n}(EntityStore);\n\nfunction storeObjectReconciler(existingObject, incomingObject, property) {\n  var existingValue = existingObject[property];\n  var incomingValue = incomingObject[property];\n  return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\n\nexport function supportsResultCaching(store) {\n  return !!(store instanceof EntityStore && store.group.caching);\n}","map":{"version":3,"sources":["../../../src/cache/inmemory/entityStore.ts"],"names":[],"mappings":"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","sourcesContent":["import { dep, OptimisticDependencyFunction, KeyTrie } from 'optimism';\nimport { equal } from '@wry/equality';\n\nimport {\n  isReference,\n  StoreValue,\n  StoreObject,\n  Reference,\n  makeReference,\n  DeepMerger,\n  maybeDeepFreeze,\n  canUseWeakMap,\n} from '../../utilities';\nimport { NormalizedCache, NormalizedCacheObject } from './types';\nimport { hasOwn, fieldNameFromStoreName } from './helpers';\nimport { Policies, StorageType } from './policies';\nimport { Cache } from '../core/types/Cache';\nimport {\n  SafeReadonly,\n  Modifier,\n  Modifiers,\n  ReadFieldOptions,\n  ToReferenceFunction,\n  CanReadFunction,\n} from '../core/types/common';\n\nconst DELETE: any = Object.create(null);\nconst delModifier: Modifier<any> = () => DELETE;\nconst INVALIDATE: any = Object.create(null);\n\nexport abstract class EntityStore implements NormalizedCache {\n  protected data: NormalizedCacheObject = Object.create(null);\n\n  constructor(\n    public readonly policies: Policies,\n    public readonly group: CacheGroup,\n  ) {}\n\n  public abstract addLayer(\n    layerId: string,\n    replay: (layer: EntityStore) => any,\n  ): Layer;\n\n  public abstract removeLayer(layerId: string): EntityStore;\n\n  // Although the EntityStore class is abstract, it contains concrete\n  // implementations of the various NormalizedCache interface methods that\n  // are inherited by the Root and Layer subclasses.\n\n  public toObject(): NormalizedCacheObject {\n    return { ...this.data };\n  }\n\n  public has(dataId: string): boolean {\n    return this.lookup(dataId, true) !== void 0;\n  }\n\n  public get(dataId: string, fieldName: string): StoreValue {\n    this.group.depend(dataId, fieldName);\n    if (hasOwn.call(this.data, dataId)) {\n      const storeObject = this.data[dataId];\n      if (storeObject && hasOwn.call(storeObject, fieldName)) {\n        return storeObject[fieldName];\n      }\n    }\n    if (fieldName === \"__typename\" &&\n        hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n      return this.policies.rootTypenamesById[dataId];\n    }\n    if (this instanceof Layer) {\n      return this.parent.get(dataId, fieldName);\n    }\n  }\n\n  protected lookup(dataId: string, dependOnExistence?: boolean): StoreObject | undefined {\n    // The has method (above) calls lookup with dependOnExistence = true, so\n    // that it can later be invalidated when we add or remove a StoreObject for\n    // this dataId. Any consumer who cares about the contents of the StoreObject\n    // should not rely on this dependency, since the contents could change\n    // without the object being added or removed.\n    if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n\n    if (hasOwn.call(this.data, dataId)) {\n      return this.data[dataId];\n    }\n\n    if (this instanceof Layer) {\n      return this.parent.lookup(dataId, dependOnExistence);\n    }\n\n    if (this.policies.rootTypenamesById[dataId]) {\n      return Object.create(null);\n    }\n  }\n\n  public merge(dataId: string, incoming: StoreObject): void {\n    const existing = this.lookup(dataId);\n    const merged: StoreObject =\n      new DeepMerger(storeObjectReconciler).merge(existing, incoming);\n    // Even if merged === existing, existing may have come from a lower\n    // layer, so we always need to set this.data[dataId] on this level.\n    this.data[dataId] = merged;\n    if (merged !== existing) {\n      delete this.refs[dataId];\n      if (this.group.caching) {\n        const fieldsToDirty: Record<string, 1> = Object.create(null);\n\n        // If we added a new StoreObject where there was previously none, dirty\n        // anything that depended on the existence of this dataId, such as the\n        // EntityStore#has method.\n        if (!existing) fieldsToDirty.__exists = 1;\n\n        // Now invalidate dependents who called getFieldValue for any fields\n        // that are changing as a result of this merge.\n        Object.keys(incoming).forEach(storeFieldName => {\n          if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n            // Always dirty the full storeFieldName, which may include\n            // serialized arguments following the fieldName prefix.\n            fieldsToDirty[storeFieldName] = 1;\n\n            // Also dirty fieldNameFromStoreName(storeFieldName) if it's\n            // different from storeFieldName and this field does not have\n            // keyArgs configured, because that means the cache can't make\n            // any assumptions about how field values with the same field\n            // name but different arguments might be interrelated, so it\n            // must err on the side of invalidating all field values that\n            // share the same short fieldName, regardless of arguments.\n            const fieldName = fieldNameFromStoreName(storeFieldName);\n            if (fieldName !== storeFieldName &&\n                !this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n              fieldsToDirty[fieldName] = 1;\n            }\n\n            // If merged[storeFieldName] has become undefined, and this is the\n            // Root layer, actually delete the property from the merged object,\n            // which is guaranteed to have been created fresh in this method.\n            if (merged[storeFieldName] === void 0 && !(this instanceof Layer)) {\n              delete merged[storeFieldName];\n            }\n          }\n        });\n\n        Object.keys(fieldsToDirty).forEach(\n          fieldName => this.group.dirty(dataId, fieldName));\n      }\n    }\n  }\n\n  public modify(\n    dataId: string,\n    fields: Modifier<any> | Modifiers,\n  ): boolean {\n    const storeObject = this.lookup(dataId);\n\n    if (storeObject) {\n      const changedFields: Record<string, any> = Object.create(null);\n      let needToMerge = false;\n      let allDeleted = true;\n\n      const sharedDetails = {\n        DELETE,\n        INVALIDATE,\n        isReference,\n        toReference: this.toReference,\n        canRead: this.canRead,\n        readField: <V = StoreValue>(\n          fieldNameOrOptions: string | ReadFieldOptions,\n          from?: StoreObject | Reference,\n        ) => this.policies.readField<V>(\n          typeof fieldNameOrOptions === \"string\" ? {\n            fieldName: fieldNameOrOptions,\n            from: from || makeReference(dataId),\n          } : fieldNameOrOptions,\n          { store: this },\n        ),\n      };\n\n      Object.keys(storeObject).forEach(storeFieldName => {\n        const fieldName = fieldNameFromStoreName(storeFieldName);\n        let fieldValue = storeObject[storeFieldName];\n        if (fieldValue === void 0) return;\n        const modify: Modifier<StoreValue> = typeof fields === \"function\"\n          ? fields\n          : fields[storeFieldName] || fields[fieldName];\n        if (modify) {\n          let newValue = modify === delModifier ? DELETE :\n            modify(maybeDeepFreeze(fieldValue), {\n              ...sharedDetails,\n              fieldName,\n              storeFieldName,\n              storage: this.getStorage(dataId, storeFieldName),\n            });\n          if (newValue === INVALIDATE) {\n            this.group.dirty(dataId, storeFieldName);\n          } else {\n            if (newValue === DELETE) newValue = void 0;\n            if (newValue !== fieldValue) {\n              changedFields[storeFieldName] = newValue;\n              needToMerge = true;\n              fieldValue = newValue;\n            }\n          }\n        }\n        if (fieldValue !== void 0) {\n          allDeleted = false;\n        }\n      });\n\n      if (needToMerge) {\n        this.merge(dataId, changedFields);\n\n        if (allDeleted) {\n          if (this instanceof Layer) {\n            this.data[dataId] = void 0;\n          } else {\n            delete this.data[dataId];\n          }\n          this.group.dirty(dataId, \"__exists\");\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // If called with only one argument, removes the entire entity\n  // identified by dataId. If called with a fieldName as well, removes all\n  // fields of that entity whose names match fieldName according to the\n  // fieldNameFromStoreName helper function. If called with a fieldName\n  // and variables, removes all fields of that entity whose names match fieldName\n  // and whose arguments when cached exactly match the variables passed.\n  public delete(\n    dataId: string,\n    fieldName?: string,\n    args?: Record<string, any>,\n  ) {\n    const storeObject = this.lookup(dataId);\n    if (storeObject) {\n      const typename = this.getFieldValue<string>(storeObject, \"__typename\");\n      const storeFieldName = fieldName && args\n        ? this.policies.getStoreFieldName({ typename, fieldName, args })\n        : fieldName;\n      return this.modify(dataId, storeFieldName ? {\n        [storeFieldName]: delModifier,\n      } : delModifier);\n    }\n    return false;\n  }\n\n  public evict(options: Cache.EvictOptions): boolean {\n    let evicted = false;\n    if (options.id) {\n      if (hasOwn.call(this.data, options.id)) {\n        evicted = this.delete(options.id, options.fieldName, options.args);\n      }\n      if (this instanceof Layer) {\n        evicted = this.parent.evict(options) || evicted;\n      }\n      // Always invalidate the field to trigger rereading of watched\n      // queries, even if no cache data was modified by the eviction,\n      // because queries may depend on computed fields with custom read\n      // functions, whose values are not stored in the EntityStore.\n      if (options.fieldName || evicted) {\n        this.group.dirty(options.id, options.fieldName || \"__exists\");\n      }\n    }\n    return evicted;\n  }\n\n  public clear(): void {\n    this.replace(null);\n  }\n\n  public extract(): NormalizedCacheObject {\n    const obj = this.toObject();\n    const extraRootIds: string[] = [];\n    this.getRootIdSet().forEach(id => {\n      if (!hasOwn.call(this.policies.rootTypenamesById, id)) {\n        extraRootIds.push(id);\n      }\n    });\n    if (extraRootIds.length) {\n      obj.__META = { extraRootIds: extraRootIds.sort() };\n    }\n    return obj;\n  }\n\n  public replace(newData: NormalizedCacheObject | null): void {\n    Object.keys(this.data).forEach(dataId => {\n      if (!(newData && hasOwn.call(newData, dataId))) {\n        this.delete(dataId);\n      }\n    });\n    if (newData) {\n      const { __META, ...rest } = newData;\n      Object.keys(rest).forEach(dataId => {\n        this.merge(dataId, rest[dataId] as StoreObject);\n      });\n      if (__META) {\n        __META.extraRootIds.forEach(this.retain, this);\n      }\n    }\n  }\n\n  public abstract getStorage(\n    idOrObj: string | StoreObject,\n    ...storeFieldNames: (string | number)[]\n  ): StorageType;\n\n  // Maps root entity IDs to the number of times they have been retained, minus\n  // the number of times they have been released. Retained entities keep other\n  // entities they reference (even indirectly) from being garbage collected.\n  private rootIds: {\n    [rootId: string]: number;\n  } = Object.create(null);\n\n  public retain(rootId: string): number {\n    return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n  }\n\n  public release(rootId: string): number {\n    if (this.rootIds[rootId] > 0) {\n      const count = --this.rootIds[rootId];\n      if (!count) delete this.rootIds[rootId];\n      return count;\n    }\n    return 0;\n  }\n\n  // Return a Set<string> of all the ID strings that have been retained by\n  // this layer/root *and* any layers/roots beneath it.\n  public getRootIdSet(ids = new Set<string>()) {\n    Object.keys(this.rootIds).forEach(ids.add, ids);\n    if (this instanceof Layer) {\n      this.parent.getRootIdSet(ids);\n    } else {\n      // Official singleton IDs like ROOT_QUERY and ROOT_MUTATION are\n      // always considered roots for garbage collection, regardless of\n      // their retainment counts in this.rootIds.\n      Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n    }\n    return ids;\n  }\n\n  // The goal of garbage collection is to remove IDs from the Root layer of the\n  // store that are no longer reachable starting from any IDs that have been\n  // explicitly retained (see retain and release, above). Returns an array of\n  // dataId strings that were removed from the store.\n  public gc() {\n    const ids = this.getRootIdSet();\n    const snapshot = this.toObject();\n    ids.forEach(id => {\n      if (hasOwn.call(snapshot, id)) {\n        // Because we are iterating over an ECMAScript Set, the IDs we add here\n        // will be visited in later iterations of the forEach loop only if they\n        // were not previously contained by the Set.\n        Object.keys(this.findChildRefIds(id)).forEach(ids.add, ids);\n        // By removing IDs from the snapshot object here, we protect them from\n        // getting removed from the root store layer below.\n        delete snapshot[id];\n      }\n    });\n    const idsToRemove = Object.keys(snapshot);\n    if (idsToRemove.length) {\n      let root: EntityStore = this;\n      while (root instanceof Layer) root = root.parent;\n      idsToRemove.forEach(id => root.delete(id));\n    }\n    return idsToRemove;\n  }\n\n  // Lazily tracks { __ref: <dataId> } strings contained by this.data[dataId].\n  private refs: {\n    [dataId: string]: Record<string, true>;\n  } = Object.create(null);\n\n  public findChildRefIds(dataId: string): Record<string, true> {\n    if (!hasOwn.call(this.refs, dataId)) {\n      const found = this.refs[dataId] = Object.create(null);\n      const workSet = new Set([this.data[dataId]]);\n      // Within the store, only arrays and objects can contain child entity\n      // references, so we can prune the traversal using this predicate:\n      const canTraverse = (obj: any) => obj !== null && typeof obj === 'object';\n      workSet.forEach(obj => {\n        if (isReference(obj)) {\n          found[obj.__ref] = true;\n        } else if (canTraverse(obj)) {\n          Object.values(obj!)\n            // No need to add primitive values to the workSet, since they cannot\n            // contain reference objects.\n            .filter(canTraverse)\n            .forEach(workSet.add, workSet);\n        }\n      });\n    }\n    return this.refs[dataId];\n  }\n\n  // Used to compute cache keys specific to this.group.\n  public makeCacheKey(...args: any[]) {\n    return this.group.keyMaker.lookupArray(args);\n  }\n\n  // Bound function that can be passed around to provide easy access to fields\n  // of Reference objects as well as ordinary objects.\n  public getFieldValue = <T = StoreValue>(\n    objectOrReference: StoreObject | Reference | undefined,\n    storeFieldName: string,\n  ) => maybeDeepFreeze(\n    isReference(objectOrReference)\n      ? this.get(objectOrReference.__ref, storeFieldName)\n      : objectOrReference && objectOrReference[storeFieldName]\n  ) as SafeReadonly<T>;\n\n  // Returns true for non-normalized StoreObjects and non-dangling\n  // References, indicating that readField(name, objOrRef) has a chance of\n  // working. Useful for filtering out dangling references from lists.\n  public canRead: CanReadFunction = objOrRef => {\n    return isReference(objOrRef)\n      ? this.has(objOrRef.__ref)\n      : typeof objOrRef === \"object\";\n  };\n\n  // Bound function that converts an id or an object with a __typename and\n  // primary key fields to a Reference object. If called with a Reference object,\n  // that same Reference object is returned. Pass true for mergeIntoStore to persist\n  // an object into the store.\n  public toReference: ToReferenceFunction = (\n    objOrIdOrRef,\n    mergeIntoStore,\n  ) => {\n    if (typeof objOrIdOrRef === \"string\") {\n      return makeReference(objOrIdOrRef);\n    }\n\n    if (isReference(objOrIdOrRef)) {\n      return objOrIdOrRef;\n    }\n\n    const [id] = this.policies.identify(objOrIdOrRef);\n\n    if (id) {\n      const ref = makeReference(id);\n      if (mergeIntoStore) {\n        this.merge(id, objOrIdOrRef);\n      }\n      return ref;\n    }\n  };\n}\n\nexport type FieldValueGetter = EntityStore[\"getFieldValue\"];\n\n// A single CacheGroup represents a set of one or more EntityStore objects,\n// typically the Root store in a CacheGroup by itself, and all active Layer\n// stores in a group together. A single EntityStore object belongs to only\n// one CacheGroup, store.group. The CacheGroup is responsible for tracking\n// dependencies, so store.group is helpful for generating unique keys for\n// cached results that need to be invalidated when/if those dependencies\n// change. If we used the EntityStore objects themselves as cache keys (that\n// is, store rather than store.group), the cache would become unnecessarily\n// fragmented by all the different Layer objects. Instead, the CacheGroup\n// approach allows all optimistic Layer objects in the same linked list to\n// belong to one CacheGroup, with the non-optimistic Root object belonging\n// to another CacheGroup, allowing resultCaching dependencies to be tracked\n// separately for optimistic and non-optimistic entity data.\nclass CacheGroup {\n  private d: OptimisticDependencyFunction<string> | null = null;\n\n  constructor(public readonly caching: boolean) {\n    this.d = caching ? dep<string>() : null;\n  }\n\n  public depend(dataId: string, storeFieldName: string) {\n    if (this.d) {\n      this.d(makeDepKey(dataId, storeFieldName));\n      const fieldName = fieldNameFromStoreName(storeFieldName);\n      if (fieldName !== storeFieldName) {\n        // Fields with arguments that contribute extra identifying\n        // information to the fieldName (thus forming the storeFieldName)\n        // depend not only on the full storeFieldName but also on the\n        // short fieldName, so the field can be invalidated using either\n        // level of specificity.\n        this.d(makeDepKey(dataId, fieldName));\n      }\n    }\n  }\n\n  public dirty(dataId: string, storeFieldName: string) {\n    if (this.d) {\n      this.d.dirty(makeDepKey(dataId, storeFieldName));\n    }\n  }\n\n  // Used by the EntityStore#makeCacheKey method to compute cache keys\n  // specific to this CacheGroup.\n  public readonly keyMaker = new KeyTrie<object>(canUseWeakMap);\n}\n\nfunction makeDepKey(dataId: string, storeFieldName: string) {\n  // Since field names cannot have '#' characters in them, this method\n  // of joining the field name and the ID should be unambiguous, and much\n  // cheaper than JSON.stringify([dataId, fieldName]).\n  return storeFieldName + '#' + dataId;\n}\n\nexport namespace EntityStore {\n  // Refer to this class as EntityStore.Root outside this namespace.\n  export class Root extends EntityStore {\n    // Although each Root instance gets its own unique CacheGroup object,\n    // any Layer instances created by calling addLayer need to share a\n    // single distinct CacheGroup object. Since this shared object must\n    // outlast the Layer instances themselves, it needs to be created and\n    // owned by the Root instance.\n    private sharedLayerGroup: CacheGroup;\n\n    constructor({\n      policies,\n      resultCaching = true,\n      seed,\n    }: {\n      policies: Policies;\n      resultCaching?: boolean;\n      seed?: NormalizedCacheObject;\n    }) {\n      super(policies, new CacheGroup(resultCaching));\n      this.sharedLayerGroup = new CacheGroup(resultCaching);\n      if (seed) this.replace(seed);\n    }\n\n    public addLayer(\n      layerId: string,\n      replay: (layer: EntityStore) => any,\n    ): Layer {\n      // The replay function will be called in the Layer constructor.\n      return new Layer(layerId, this, replay, this.sharedLayerGroup);\n    }\n\n    public removeLayer(): Root {\n      // Never remove the root layer.\n      return this;\n    }\n\n    public readonly storageTrie = new KeyTrie<StorageType>(canUseWeakMap);\n    public getStorage(): StorageType {\n      return this.storageTrie.lookupArray(arguments);\n    }\n  }\n}\n\n// Not exported, since all Layer instances are created by the addLayer method\n// of the EntityStore.Root class.\nclass Layer extends EntityStore {\n  constructor(\n    public readonly id: string,\n    public readonly parent: EntityStore,\n    public readonly replay: (layer: EntityStore) => any,\n    public readonly group: CacheGroup,\n  ) {\n    super(parent.policies, group);\n    replay(this);\n  }\n\n  public addLayer(\n    layerId: string,\n    replay: (layer: EntityStore) => any,\n  ): Layer {\n    return new Layer(layerId, this, replay, this.group);\n  }\n\n  public removeLayer(layerId: string): EntityStore {\n    // Remove all instances of the given id, not just the first one.\n    const parent = this.parent.removeLayer(layerId);\n\n    if (layerId === this.id) {\n      // Dirty every ID we're removing.\n      if (this.group.caching) {\n        Object.keys(this.data).forEach(dataId => {\n          // If this.data[dataId] contains nothing different from what\n          // lies beneath, we can avoid dirtying this dataId and all of\n          // its fields, and simply discard this Layer. The only reason we\n          // call this.delete here is to dirty the removed fields.\n          if (this.data[dataId] !== (parent as Layer).lookup(dataId)) {\n            this.delete(dataId);\n          }\n        });\n      }\n      return parent;\n    }\n\n    // No changes are necessary if the parent chain remains identical.\n    if (parent === this.parent) return this;\n\n    // Recreate this layer on top of the new parent.\n    return parent.addLayer(this.id, this.replay);\n  }\n\n  public toObject(): NormalizedCacheObject {\n    return {\n      ...this.parent.toObject(),\n      ...this.data,\n    };\n  }\n\n  public findChildRefIds(dataId: string): Record<string, true> {\n    const fromParent = this.parent.findChildRefIds(dataId);\n    return hasOwn.call(this.data, dataId) ? {\n      ...fromParent,\n      ...super.findChildRefIds(dataId),\n    } : fromParent;\n  }\n\n  public getStorage(): StorageType {\n    let p: EntityStore = this.parent;\n    while ((p as Layer).parent) p = (p as Layer).parent;\n    return p.getStorage.apply(p, arguments);\n  }\n}\n\nfunction storeObjectReconciler(\n  existingObject: StoreObject,\n  incomingObject: StoreObject,\n  property: string,\n): StoreValue {\n  const existingValue = existingObject[property];\n  const incomingValue = incomingObject[property];\n  // Wherever there is a key collision, prefer the incoming value, unless\n  // it is deeply equal to the existing value. It's worth checking deep\n  // equality here (even though blindly returning incoming would be\n  // logically correct) because preserving the referential identity of\n  // existing data can prevent needless rereading and rerendering.\n  return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\n\nexport function supportsResultCaching(store: any): store is EntityStore {\n  // When result caching is disabled, store.depend will be null.\n  return !!(store instanceof EntityStore && store.group.caching);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}