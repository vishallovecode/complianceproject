{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useContext, useEffect, useReducer, useRef } from 'react';\nimport { QueryData } from \"../../data/index.js\";\nimport { useDeepMemo } from \"./useDeepMemo.js\";\nimport { getApolloContext } from \"../../context/index.js\";\nexport function useBaseQuery(query, options, lazy) {\n  if (lazy === void 0) {\n    lazy = false;\n  }\n\n  var context = useContext(getApolloContext());\n\n  var _a = useReducer(function (x) {\n    return x + 1;\n  }, 0),\n      tick = _a[0],\n      forceUpdate = _a[1];\n\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    query: query\n  }) : {\n    query: query\n  };\n  var queryDataRef = useRef();\n  var queryData = queryDataRef.current || (queryDataRef.current = new QueryData({\n    options: updatedOptions,\n    context: context,\n    onNewData: function onNewData() {\n      if (!queryData.ssrInitiated()) {\n        Promise.resolve().then(function () {\n          return queryDataRef.current && forceUpdate();\n        });\n      } else {\n        forceUpdate();\n      }\n    }\n  }));\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n  var memo = {\n    options: __assign(__assign({}, updatedOptions), {\n      onError: undefined,\n      onCompleted: undefined\n    }),\n    context: context,\n    tick: tick\n  };\n  var result = useDeepMemo(function () {\n    return lazy ? queryData.executeLazy() : queryData.execute();\n  }, memo);\n  var queryResult = lazy ? result[1] : result;\n  useEffect(function () {\n    return function () {\n      return queryData.cleanup();\n    };\n  }, []);\n  useEffect(function () {\n    return queryData.afterExecute({\n      lazy: lazy\n    });\n  }, [queryResult.loading, queryResult.networkStatus, queryResult.error, queryResult.data]);\n  return result;\n}","map":{"version":3,"sources":["../../../../src/react/hooks/utils/useBaseQuery.ts"],"names":[],"mappings":";AAAA,SAAS,UAAT,EAAqB,SAArB,EAAgC,UAAhC,EAA4C,MAA5C,QAA0D,OAA1D;AAUA,SAAS,SAAT,QAA0B,qBAA1B;AACA,SAAS,WAAT,QAA4B,kBAA5B;AAEA,SAAS,gBAAT,QAAiC,wBAAjC;AAEA,OAAM,SAAU,YAAV,CACJ,KADI,EAEJ,OAFI,EAGJ,IAHI,EAGQ;EAAZ,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA;IAAA,IAAA,GAAA,KAAA;EAAY;;EAEZ,IAAM,OAAO,GAAG,UAAU,CAAC,gBAAgB,EAAjB,CAA1B;;EACM,IAAA,EAAA,GAAsB,UAAU,CAAC,UAAA,CAAA,EAAC;IAAI,OAAA,CAAC,GAAD,CAAA;EAAK,CAAX,EAAa,CAAb,CAAhC;EAAA,IAAC,IAAI,GAAA,EAAA,CAAA,CAAA,CAAL;EAAA,IAAO,WAAW,GAAA,EAAA,CAAA,CAAA,CAAlB;;EACN,IAAM,cAAc,GAAG,OAAO,GAAE,QAAA,CAAA,QAAA,CAAA,EAAA,EAAM,OAAN,CAAA,EAAa;IAAE,KAAK,EAAA;EAAP,CAAb,CAAF,GAA2B;IAAE,KAAK,EAAA;EAAP,CAAzD;EAEA,IAAM,YAAY,GAAG,MAAM,EAA3B;EACA,IAAM,SAAS,GAAG,YAAY,CAAC,OAAb,KAChB,YAAY,CAAC,OAAb,GAAuB,IAAI,SAAJ,CAAiC;IACtD,OAAO,EAAE,cAD6C;IAEtD,OAAO,EAAA,OAF+C;IAGtD,SAAS,EAAA,qBAAA;MACP,IAAI,CAAC,SAAS,CAAC,YAAV,EAAL,EAA+B;QAO7B,OAAO,CAAC,OAAR,GAAkB,IAAlB,CAAuB,YAAA;UAAM,OAAA,YAAY,CAAC,OAAb,IAAwB,WAAxB,EAAA;QAAqC,CAAlE;MACD,CARD,MAQO;QAGL,WAAW;MACZ;IACF;EAjBqD,CAAjC,CADP,CAAlB;EAsBA,SAAS,CAAC,UAAV,CAAqB,cAArB;EACA,SAAS,CAAC,OAAV,GAAoB,OAApB;EAKA,IAAM,IAAI,GAAG;IACX,OAAO,EAAE,QAAA,CAAA,QAAA,CAAA,EAAA,EACJ,cADI,CAAA,EACU;MACjB,OAAO,EAAE,SADQ;MAEjB,WAAW,EAAE;IAFI,CADV,CADE;IAMX,OAAO,EAAA,OANI;IAOX,IAAI,EAAA;EAPO,CAAb;EAUA,IAAM,MAAM,GAAG,WAAW,CACxB,YAAA;IAAM,OAAC,IAAI,GAAG,SAAS,CAAC,WAAV,EAAH,GAA6B,SAAS,CAA3C,OAAkC,EAAlC;EAAsD,CADpC,EAExB,IAFwB,CAA1B;EAKA,IAAM,WAAW,GAAG,IAAI,GACnB,MAAwC,CAAC,CAAD,CADrB,GAEnB,MAFL;EAIA,SAAS,CAAC,YAAA;IACR,OAAO,YAAA;MAAM,OAAA,SAAS,CAAT,OAAA,EAAA;IAAmB,CAAhC;EACD,CAFQ,EAEN,EAFM,CAAT;EAIA,SAAS,CAAC,YAAA;IAAM,OAAA,SAAS,CAAC,YAAV,CAAuB;MAAE,IAAI,EAA7B;IAAuB,CAAvB,CAAA;EAAgC,CAAvC,EAAyC,CAChD,WAAW,CAAC,OADoC,EAEhD,WAAW,CAAC,aAFoC,EAGhD,WAAW,CAAC,KAHoC,EAIhD,WAAW,CAAC,IAJoC,CAAzC,CAAT;EAOA,OAAO,MAAP;AACD","sourcesContent":["import { useContext, useEffect, useReducer, useRef } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport {\n  QueryHookOptions,\n  QueryDataOptions,\n  QueryTuple,\n  QueryResult,\n} from '../../types/types';\nimport { QueryData } from '../../data';\nimport { useDeepMemo } from './useDeepMemo';\nimport { OperationVariables } from '../../../core';\nimport { getApolloContext } from '../../context';\n\nexport function useBaseQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>,\n  lazy = false\n) {\n  const context = useContext(getApolloContext());\n  const [tick, forceUpdate] = useReducer(x => x + 1, 0);\n  const updatedOptions = options ? { ...options, query } : { query };\n\n  const queryDataRef = useRef<QueryData<TData, TVariables>>();\n  const queryData = queryDataRef.current || (\n    queryDataRef.current = new QueryData<TData, TVariables>({\n      options: updatedOptions as QueryDataOptions<TData, TVariables>,\n      context,\n      onNewData() {\n        if (!queryData.ssrInitiated()) {\n          // When new data is received from the `QueryData` object, we want to\n          // force a re-render to make sure the new data is displayed. We can't\n          // force that re-render if we're already rendering however so to be\n          // safe we'll trigger the re-render in a microtask. In case the\n          // component gets unmounted before this callback fires, we re-check\n          // queryDataRef.current before calling forceUpdate().\n          Promise.resolve().then(() => queryDataRef.current && forceUpdate());\n        } else {\n          // If we're rendering on the server side we can force an update at\n          // any point.\n          forceUpdate();\n        }\n      }\n    })\n  );\n\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  // `onError` and `onCompleted` callback functions will not always have a\n  // stable identity, so we'll exclude them from the memoization key to\n  // prevent `afterExecute` from being triggered un-necessarily.\n  const memo = {\n    options: {\n      ...updatedOptions,\n      onError: undefined,\n      onCompleted: undefined\n    } as QueryHookOptions<TData, TVariables>,\n    context,\n    tick\n  };\n\n  const result = useDeepMemo(\n    () => (lazy ? queryData.executeLazy() : queryData.execute()),\n    memo\n  );\n\n  const queryResult = lazy\n    ? (result as QueryTuple<TData, TVariables>)[1]\n    : (result as QueryResult<TData, TVariables>);\n\n  useEffect(() => {\n    return () => queryData.cleanup();\n  }, []);\n\n  useEffect(() => queryData.afterExecute({ lazy }), [\n    queryResult.loading,\n    queryResult.networkStatus,\n    queryResult.error,\n    queryResult.data,\n  ]);\n\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}