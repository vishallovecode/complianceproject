{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useContext, useState, useRef, useEffect } from 'react';\nimport { MutationData } from \"../data/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nexport function useMutation(mutation, options) {\n  var context = useContext(getApolloContext());\n\n  var _a = useState({\n    called: false,\n    loading: false\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    mutation: mutation\n  }) : {\n    mutation: mutation\n  };\n  var mutationDataRef = useRef();\n\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData({\n        options: updatedOptions,\n        context: context,\n        result: result,\n        setResult: setResult\n      });\n    }\n\n    return mutationDataRef.current;\n  }\n\n  var mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n  useEffect(function () {\n    return mutationData.afterExecute();\n  });\n  return mutationData.execute(result);\n}","map":{"version":3,"sources":["../../../src/react/hooks/useMutation.ts"],"names":[],"mappings":";AAAA,SAAS,UAAT,EAAqB,QAArB,EAA+B,MAA/B,EAAuC,SAAvC,QAAwD,OAAxD;AAKA,SAAS,YAAT,QAA6B,kBAA7B;AAEA,SAAS,gBAAT,QAAiC,qBAAjC;AAEA,OAAM,SAAU,WAAV,CACJ,QADI,EAEJ,OAFI,EAE4C;EAEhD,IAAM,OAAO,GAAG,UAAU,CAAC,gBAAgB,EAAjB,CAA1B;;EACM,IAAA,EAAA,GAAsB,QAAQ,CAAC;IAAE,MAAM,EAAE,KAAV;IAAiB,OAAO,EAAE;EAA1B,CAAD,CAA9B;EAAA,IAAC,MAAM,GAAA,EAAA,CAAA,CAAA,CAAP;EAAA,IAAS,SAAS,GAAA,EAAA,CAAA,CAAA,CAAlB;;EACN,IAAM,cAAc,GAAG,OAAO,GAAE,QAAA,CAAA,QAAA,CAAA,EAAA,EAAM,OAAN,CAAA,EAAa;IAAE,QAAQ,EAAA;EAAV,CAAb,CAAF,GAA8B;IAAE,QAAQ,EAAA;EAAV,CAA5D;EAEA,IAAM,eAAe,GAAG,MAAM,EAA9B;;EACA,SAAS,kBAAT,GAA2B;IACzB,IAAI,CAAC,eAAe,CAAC,OAArB,EAA8B;MAC5B,eAAe,CAAC,OAAhB,GAA0B,IAAI,YAAJ,CAAoC;QAC5D,OAAO,EAAE,cADmD;QAE5D,OAAO,EAAA,OAFqD;QAG5D,MAAM,EAAA,MAHsD;QAI5D,SAAS,EAAA;MAJmD,CAApC,CAA1B;IAMD;;IACD,OAAO,eAAe,CAAC,OAAvB;EACD;;EAED,IAAM,YAAY,GAAG,kBAAkB,EAAvC;EACA,YAAY,CAAC,UAAb,CAAwB,cAAxB;EACA,YAAY,CAAC,OAAb,GAAuB,OAAvB;EAEA,SAAS,CAAC,YAAA;IAAM,OAAA,YAAY,CAAZ,YAAA,EAAA;EAA2B,CAAlC,CAAT;EAEA,OAAO,YAAY,CAAC,OAAb,CAAqB,MAArB,CAAP;AACD","sourcesContent":["import { useContext, useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { MutationHookOptions, MutationTuple } from '../types/types';\nimport { MutationData } from '../data';\nimport { OperationVariables } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useMutation<TData = any, TVariables = OperationVariables>(\n  mutation: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: MutationHookOptions<TData, TVariables>\n): MutationTuple<TData, TVariables> {\n  const context = useContext(getApolloContext());\n  const [result, setResult] = useState({ called: false, loading: false });\n  const updatedOptions = options ? { ...options, mutation } : { mutation };\n\n  const mutationDataRef = useRef<MutationData<TData, TVariables>>();\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        result,\n        setResult\n      });\n    }\n    return mutationDataRef.current;\n  }\n\n  const mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n\n  useEffect(() => mutationData.afterExecute());\n\n  return mutationData.execute(result);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}