{"ast":null,"code":"import { invariant, InvariantError } from 'ts-invariant';\nimport { valueToObjectRepresentation } from \"./storeUtils.js\";\nexport function checkDocument(doc) {\n  process.env.NODE_ENV === \"production\" ? invariant(doc && doc.kind === 'Document', 45) : invariant(doc && doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n  var operations = doc.definitions.filter(function (d) {\n    return d.kind !== 'FragmentDefinition';\n  }).map(function (definition) {\n    if (definition.kind !== 'OperationDefinition') {\n      throw process.env.NODE_ENV === \"production\" ? new InvariantError(46) : new InvariantError(\"Schema type definitions not allowed in queries. Found: \\\"\" + definition.kind + \"\\\"\");\n    }\n\n    return definition;\n  });\n  process.env.NODE_ENV === \"production\" ? invariant(operations.length <= 1, 47) : invariant(operations.length <= 1, \"Ambiguous GraphQL document: contains \" + operations.length + \" operations\");\n  return doc;\n}\nexport function getOperationDefinition(doc) {\n  checkDocument(doc);\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition';\n  })[0];\n}\nexport function getOperationName(doc) {\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition' && definition.name;\n  }).map(function (x) {\n    return x.name.value;\n  })[0] || null;\n}\nexport function getFragmentDefinitions(doc) {\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'FragmentDefinition';\n  });\n}\nexport function getQueryDefinition(doc) {\n  var queryDef = getOperationDefinition(doc);\n  process.env.NODE_ENV === \"production\" ? invariant(queryDef && queryDef.operation === 'query', 48) : invariant(queryDef && queryDef.operation === 'query', 'Must contain a query definition.');\n  return queryDef;\n}\nexport function getFragmentDefinition(doc) {\n  process.env.NODE_ENV === \"production\" ? invariant(doc.kind === 'Document', 49) : invariant(doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n  process.env.NODE_ENV === \"production\" ? invariant(doc.definitions.length <= 1, 50) : invariant(doc.definitions.length <= 1, 'Fragment must have exactly one definition.');\n  var fragmentDef = doc.definitions[0];\n  process.env.NODE_ENV === \"production\" ? invariant(fragmentDef.kind === 'FragmentDefinition', 51) : invariant(fragmentDef.kind === 'FragmentDefinition', 'Must be a fragment definition.');\n  return fragmentDef;\n}\nexport function getMainDefinition(queryDoc) {\n  checkDocument(queryDoc);\n  var fragmentDefinition;\n\n  for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n    var definition = _a[_i];\n\n    if (definition.kind === 'OperationDefinition') {\n      var operation = definition.operation;\n\n      if (operation === 'query' || operation === 'mutation' || operation === 'subscription') {\n        return definition;\n      }\n    }\n\n    if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n      fragmentDefinition = definition;\n    }\n  }\n\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n\n  throw process.env.NODE_ENV === \"production\" ? new InvariantError(52) : new InvariantError('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.');\n}\nexport function getDefaultValues(definition) {\n  var defaultValues = Object.create(null);\n  var defs = definition && definition.variableDefinitions;\n\n  if (defs && defs.length) {\n    defs.forEach(function (def) {\n      if (def.defaultValue) {\n        valueToObjectRepresentation(defaultValues, def.variable.name, def.defaultValue);\n      }\n    });\n  }\n\n  return defaultValues;\n}","map":{"version":3,"sources":["../../../src/utilities/graphql/getFromAST.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  DocumentNode,\n  OperationDefinitionNode,\n  FragmentDefinitionNode,\n  ValueNode,\n} from 'graphql';\n\nimport { invariant, InvariantError } from 'ts-invariant';\n\nimport { valueToObjectRepresentation } from './storeUtils';\n\n// Checks the document for errors and throws an exception if there is an error.\nexport function checkDocument(doc: DocumentNode) {\n  invariant(\n    doc && doc.kind === 'Document',\n    `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`,\n  );\n\n  const operations = doc.definitions\n    .filter(d => d.kind !== 'FragmentDefinition')\n    .map(definition => {\n      if (definition.kind !== 'OperationDefinition') {\n        throw new InvariantError(\n          `Schema type definitions not allowed in queries. Found: \"${\n            definition.kind\n          }\"`,\n        );\n      }\n      return definition;\n    });\n\n  invariant(\n    operations.length <= 1,\n    `Ambiguous GraphQL document: contains ${operations.length} operations`,\n  );\n\n  return doc;\n}\n\nexport function getOperationDefinition(\n  doc: DocumentNode,\n): OperationDefinitionNode | undefined {\n  checkDocument(doc);\n  return doc.definitions.filter(\n    definition => definition.kind === 'OperationDefinition',\n  )[0] as OperationDefinitionNode;\n}\n\nexport function getOperationName(doc: DocumentNode): string | null {\n  return (\n    doc.definitions\n      .filter(\n        definition =>\n          definition.kind === 'OperationDefinition' && definition.name,\n      )\n      .map((x: OperationDefinitionNode) => x!.name!.value)[0] || null\n  );\n}\n\n// Returns the FragmentDefinitions from a particular document as an array\nexport function getFragmentDefinitions(\n  doc: DocumentNode,\n): FragmentDefinitionNode[] {\n  return doc.definitions.filter(\n    definition => definition.kind === 'FragmentDefinition',\n  ) as FragmentDefinitionNode[];\n}\n\nexport function getQueryDefinition(doc: DocumentNode): OperationDefinitionNode {\n  const queryDef = getOperationDefinition(doc) as OperationDefinitionNode;\n\n  invariant(\n    queryDef && queryDef.operation === 'query',\n    'Must contain a query definition.',\n  );\n\n  return queryDef;\n}\n\nexport function getFragmentDefinition(\n  doc: DocumentNode,\n): FragmentDefinitionNode {\n  invariant(\n    doc.kind === 'Document',\n    `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`,\n  );\n\n  invariant(\n    doc.definitions.length <= 1,\n    'Fragment must have exactly one definition.',\n  );\n\n  const fragmentDef = doc.definitions[0] as FragmentDefinitionNode;\n\n  invariant(\n    fragmentDef.kind === 'FragmentDefinition',\n    'Must be a fragment definition.',\n  );\n\n  return fragmentDef as FragmentDefinitionNode;\n}\n\n/**\n * Returns the first operation definition found in this document.\n * If no operation definition is found, the first fragment definition will be returned.\n * If no definitions are found, an error will be thrown.\n */\nexport function getMainDefinition(\n  queryDoc: DocumentNode,\n): OperationDefinitionNode | FragmentDefinitionNode {\n  checkDocument(queryDoc);\n\n  let fragmentDefinition;\n\n  for (let definition of queryDoc.definitions) {\n    if (definition.kind === 'OperationDefinition') {\n      const operation = (definition as OperationDefinitionNode).operation;\n      if (\n        operation === 'query' ||\n        operation === 'mutation' ||\n        operation === 'subscription'\n      ) {\n        return definition as OperationDefinitionNode;\n      }\n    }\n    if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n      // we do this because we want to allow multiple fragment definitions\n      // to precede an operation definition.\n      fragmentDefinition = definition as FragmentDefinitionNode;\n    }\n  }\n\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n\n  throw new InvariantError(\n    'Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.',\n  );\n}\n\nexport function getDefaultValues(\n  definition: OperationDefinitionNode | undefined,\n): Record<string, any> {\n  const defaultValues = Object.create(null);\n  const defs = definition && definition.variableDefinitions;\n  if (defs && defs.length) {\n    defs.forEach(def => {\n      if (def.defaultValue) {\n        valueToObjectRepresentation(\n          defaultValues,\n          def.variable.name,\n          def.defaultValue as ValueNode,\n        );\n      }\n    });\n  }\n  return defaultValues;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}