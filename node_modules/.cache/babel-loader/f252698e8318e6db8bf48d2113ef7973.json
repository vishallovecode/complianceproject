{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { equal } from '@wry/equality';\nimport { DocumentType } from \"../parser/index.js\";\nimport { ApolloError } from \"../../errors/index.js\";\nimport { OperationData } from \"./OperationData.js\";\nimport { mergeOptions } from \"../../core/index.js\";\n\nvar MutationData = function (_super) {\n  __extends(MutationData, _super);\n\n  function MutationData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        result = _a.result,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.runMutation = function (mutationFunctionOptions) {\n      if (mutationFunctionOptions === void 0) {\n        mutationFunctionOptions = {};\n      }\n\n      _this.onMutationStart();\n\n      var mutationId = _this.generateNewMutationId();\n\n      return _this.mutate(mutationFunctionOptions).then(function (response) {\n        _this.onMutationCompleted(response, mutationId);\n\n        return response;\n      }).catch(function (error) {\n        _this.onMutationError(error, mutationId);\n\n        if (!_this.getOptions().onError) throw error;\n      });\n    };\n\n    _this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n\n    _this.result = result;\n    _this.setResult = setResult;\n    _this.mostRecentMutationId = 0;\n    return _this;\n  }\n\n  MutationData.prototype.execute = function (result) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    return [this.runMutation, __assign(__assign({}, result), {\n      client: this.refreshClient().client\n    })];\n  };\n\n  MutationData.prototype.afterExecute = function () {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  };\n\n  MutationData.prototype.cleanup = function () {};\n\n  MutationData.prototype.mutate = function (options) {\n    return this.refreshClient().client.mutate(mergeOptions(this.getOptions(), options));\n  };\n\n  MutationData.prototype.onMutationStart = function () {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  };\n\n  MutationData.prototype.onMutationCompleted = function (response, mutationId) {\n    var _a = this.getOptions(),\n        onCompleted = _a.onCompleted,\n        ignoreResults = _a.ignoreResults;\n\n    var data = response.data,\n        errors = response.errors;\n    var error = errors && errors.length > 0 ? new ApolloError({\n      graphQLErrors: errors\n    }) : undefined;\n\n    var callOncomplete = function callOncomplete() {\n      return onCompleted ? onCompleted(data) : null;\n    };\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data: data,\n        error: error\n      });\n    }\n\n    callOncomplete();\n  };\n\n  MutationData.prototype.onMutationError = function (error, mutationId) {\n    var onError = this.getOptions().onError;\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error: error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  };\n\n  MutationData.prototype.generateNewMutationId = function () {\n    return ++this.mostRecentMutationId;\n  };\n\n  MutationData.prototype.isMostRecentMutation = function (mutationId) {\n    return this.mostRecentMutationId === mutationId;\n  };\n\n  MutationData.prototype.updateResult = function (result) {\n    if (this.isMounted && (!this.previousResult || !equal(this.previousResult, result))) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  };\n\n  return MutationData;\n}(OperationData);\n\nexport { MutationData };","map":{"version":3,"sources":["../../../src/react/data/MutationData.ts"],"names":[],"mappings":"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","sourcesContent":["import { equal } from '@wry/equality';\n\nimport { DocumentType } from '../parser';\nimport { ApolloError } from '../../errors';\nimport {\n  MutationDataOptions,\n  MutationTuple,\n  MutationFunctionOptions,\n  MutationResult,\n} from '../types/types';\nimport { OperationData } from './OperationData';\nimport { OperationVariables, MutationOptions, mergeOptions } from '../../core';\nimport { FetchResult } from '../../link/core';\n\ntype MutationResultWithoutClient<TData = any> = Omit<MutationResult<TData>, 'client'>;\n\nexport class MutationData<\n  TData = any,\n  TVariables = OperationVariables\n> extends OperationData<MutationDataOptions<TData, TVariables>> {\n  private mostRecentMutationId: number;\n  private result: MutationResultWithoutClient<TData>;\n  private previousResult?: MutationResultWithoutClient<TData>;\n  private setResult: (result: MutationResultWithoutClient<TData>) => any;\n\n  constructor({\n    options,\n    context,\n    result,\n    setResult\n  }: {\n    options: MutationDataOptions<TData, TVariables>;\n    context: any;\n    result: MutationResultWithoutClient<TData>;\n    setResult: (result: MutationResultWithoutClient<TData>) => any;\n  }) {\n    super(options, context);\n    this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    this.result = result;\n    this.setResult = setResult;\n    this.mostRecentMutationId = 0;\n  }\n\n  public execute(result: MutationResultWithoutClient<TData>): MutationTuple<TData, TVariables> {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    return [\n      this.runMutation,\n      { ...result, client: this.refreshClient().client }\n    ] as MutationTuple<TData, TVariables>;\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    // No cleanup required.\n  }\n\n  private runMutation = (\n    mutationFunctionOptions: MutationFunctionOptions<\n      TData,\n      TVariables\n    > = {} as MutationFunctionOptions<TData, TVariables>\n  ) => {\n    this.onMutationStart();\n    const mutationId = this.generateNewMutationId();\n\n    return this.mutate(mutationFunctionOptions)\n      .then((response: FetchResult<TData>) => {\n        this.onMutationCompleted(response, mutationId);\n        return response;\n      })\n      .catch((error: ApolloError) => {\n        this.onMutationError(error, mutationId);\n        if (!this.getOptions().onError) throw error;\n      });\n  };\n\n  private mutate(\n    options: MutationFunctionOptions<TData, TVariables>\n  ) {\n    return this.refreshClient().client.mutate(\n      mergeOptions(\n        this.getOptions(),\n        options as MutationOptions<TData, TVariables>,\n      ),\n    );\n  }\n\n  private onMutationStart() {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private onMutationCompleted(\n    response: FetchResult<TData>,\n    mutationId: number\n  ) {\n    const { onCompleted, ignoreResults } = this.getOptions();\n\n    const { data, errors } = response;\n    const error =\n      errors && errors.length > 0\n        ? new ApolloError({ graphQLErrors: errors })\n        : undefined;\n\n    const callOncomplete = () =>\n      onCompleted ? onCompleted(data as TData) : null;\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data,\n        error\n      });\n    }\n    callOncomplete();\n  }\n\n  private onMutationError(error: ApolloError, mutationId: number) {\n    const { onError } = this.getOptions();\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  }\n\n  private generateNewMutationId(): number {\n    return ++this.mostRecentMutationId;\n  }\n\n  private isMostRecentMutation(mutationId: number) {\n    return this.mostRecentMutationId === mutationId;\n  }\n\n  private updateResult(result: MutationResultWithoutClient<TData>) {\n    if (\n      this.isMounted &&\n      (!this.previousResult || !equal(this.previousResult, result))\n    ) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}