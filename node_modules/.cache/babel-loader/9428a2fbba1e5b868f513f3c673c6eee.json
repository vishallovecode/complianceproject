{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport \"./fixPolyfills.js\";\nimport { dep, wrap } from 'optimism';\nimport { ApolloCache } from \"../core/cache.js\";\nimport { MissingFieldError } from \"../core/types/common.js\";\nimport { addTypenameToDocument, isReference } from \"../../utilities/index.js\";\nimport { StoreReader } from \"./readFromStore.js\";\nimport { StoreWriter } from \"./writeToStore.js\";\nimport { EntityStore, supportsResultCaching } from \"./entityStore.js\";\nimport { makeVar, forgetCache, recallCache } from \"./reactiveVars.js\";\nimport { defaultDataIdFromObject, Policies } from \"./policies.js\";\nimport { hasOwn } from \"./helpers.js\";\nvar defaultConfig = {\n  dataIdFromObject: defaultDataIdFromObject,\n  addTypename: true,\n  resultCaching: true,\n  typePolicies: {}\n};\n\nvar InMemoryCache = function (_super) {\n  __extends(InMemoryCache, _super);\n\n  function InMemoryCache(config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.watches = new Set();\n    _this.typenameDocumentCache = new Map();\n    _this.makeVar = makeVar;\n    _this.txCount = 0;\n    _this.maybeBroadcastWatch = wrap(function (c, fromOptimisticTransaction) {\n      return _this.broadcastWatch.call(_this, c, !!fromOptimisticTransaction);\n    }, {\n      makeCacheKey: function makeCacheKey(c) {\n        var store = c.optimistic ? _this.optimisticData : _this.data;\n\n        if (supportsResultCaching(store)) {\n          var optimistic = c.optimistic,\n              rootId = c.rootId,\n              variables = c.variables;\n          return store.makeCacheKey(c.query, c.callback, JSON.stringify({\n            optimistic: optimistic,\n            rootId: rootId,\n            variables: variables\n          }));\n        }\n      }\n    });\n    _this.watchDep = dep();\n    _this.config = __assign(__assign({}, defaultConfig), config);\n    _this.addTypename = !!_this.config.addTypename;\n    _this.policies = new Policies({\n      cache: _this,\n      dataIdFromObject: _this.config.dataIdFromObject,\n      possibleTypes: _this.config.possibleTypes,\n      typePolicies: _this.config.typePolicies\n    });\n    _this.data = new EntityStore.Root({\n      policies: _this.policies,\n      resultCaching: _this.config.resultCaching\n    });\n    _this.optimisticData = _this.data;\n    _this.storeWriter = new StoreWriter(_this, _this.storeReader = new StoreReader({\n      cache: _this,\n      addTypename: _this.addTypename\n    }));\n    return _this;\n  }\n\n  InMemoryCache.prototype.restore = function (data) {\n    if (data) this.data.replace(data);\n    return this;\n  };\n\n  InMemoryCache.prototype.extract = function (optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    return (optimistic ? this.optimisticData : this.data).extract();\n  };\n\n  InMemoryCache.prototype.read = function (options) {\n    var _a = options.returnPartialData,\n        returnPartialData = _a === void 0 ? false : _a;\n\n    try {\n      return this.storeReader.diffQueryAgainstStore({\n        store: options.optimistic ? this.optimisticData : this.data,\n        query: options.query,\n        variables: options.variables,\n        rootId: options.rootId,\n        config: this.config,\n        returnPartialData: returnPartialData\n      }).result || null;\n    } catch (e) {\n      if (e instanceof MissingFieldError) {\n        return null;\n      }\n\n      throw e;\n    }\n  };\n\n  InMemoryCache.prototype.write = function (options) {\n    try {\n      ++this.txCount;\n      return this.storeWriter.writeToStore({\n        store: this.data,\n        query: options.query,\n        result: options.result,\n        dataId: options.dataId,\n        variables: options.variables\n      });\n    } finally {\n      if (! --this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  };\n\n  InMemoryCache.prototype.modify = function (options) {\n    if (hasOwn.call(options, \"id\") && !options.id) {\n      return false;\n    }\n\n    var store = options.optimistic ? this.optimisticData : this.data;\n\n    try {\n      ++this.txCount;\n      return store.modify(options.id || \"ROOT_QUERY\", options.fields);\n    } finally {\n      if (! --this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  };\n\n  InMemoryCache.prototype.diff = function (options) {\n    return this.storeReader.diffQueryAgainstStore({\n      store: options.optimistic ? this.optimisticData : this.data,\n      rootId: options.id || \"ROOT_QUERY\",\n      query: options.query,\n      variables: options.variables,\n      returnPartialData: options.returnPartialData,\n      config: this.config\n    });\n  };\n\n  InMemoryCache.prototype.watch = function (watch) {\n    var _this = this;\n\n    if (!this.watches.size) {\n      recallCache(this);\n    }\n\n    this.watches.add(watch);\n\n    if (watch.immediate) {\n      this.maybeBroadcastWatch(watch);\n    }\n\n    return function () {\n      if (_this.watches.delete(watch) && !_this.watches.size) {\n        forgetCache(_this);\n      }\n\n      _this.watchDep.dirty(watch);\n\n      _this.maybeBroadcastWatch.forget(watch);\n    };\n  };\n\n  InMemoryCache.prototype.gc = function () {\n    return this.optimisticData.gc();\n  };\n\n  InMemoryCache.prototype.retain = function (rootId, optimistic) {\n    return (optimistic ? this.optimisticData : this.data).retain(rootId);\n  };\n\n  InMemoryCache.prototype.release = function (rootId, optimistic) {\n    return (optimistic ? this.optimisticData : this.data).release(rootId);\n  };\n\n  InMemoryCache.prototype.identify = function (object) {\n    return isReference(object) ? object.__ref : this.policies.identify(object)[0];\n  };\n\n  InMemoryCache.prototype.evict = function (options) {\n    if (!options.id) {\n      if (hasOwn.call(options, \"id\")) {\n        return false;\n      }\n\n      options = __assign(__assign({}, options), {\n        id: \"ROOT_QUERY\"\n      });\n    }\n\n    try {\n      ++this.txCount;\n      return this.optimisticData.evict(options);\n    } finally {\n      if (! --this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  };\n\n  InMemoryCache.prototype.reset = function () {\n    this.data.clear();\n    this.optimisticData = this.data;\n    this.broadcastWatches();\n    return Promise.resolve();\n  };\n\n  InMemoryCache.prototype.removeOptimistic = function (idToRemove) {\n    var newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n\n    if (newOptimisticData !== this.optimisticData) {\n      this.optimisticData = newOptimisticData;\n      this.broadcastWatches();\n    }\n  };\n\n  InMemoryCache.prototype.performTransaction = function (transaction, optimisticId) {\n    var _this = this;\n\n    var perform = function perform(layer) {\n      var _a = _this,\n          data = _a.data,\n          optimisticData = _a.optimisticData;\n      ++_this.txCount;\n\n      if (layer) {\n        _this.data = _this.optimisticData = layer;\n      }\n\n      try {\n        transaction(_this);\n      } finally {\n        --_this.txCount;\n        _this.data = data;\n        _this.optimisticData = optimisticData;\n      }\n    };\n\n    var fromOptimisticTransaction = false;\n\n    if (typeof optimisticId === 'string') {\n      this.optimisticData = this.optimisticData.addLayer(optimisticId, perform);\n      fromOptimisticTransaction = true;\n    } else if (optimisticId === null) {\n      perform(this.data);\n    } else {\n      perform();\n    }\n\n    this.broadcastWatches(fromOptimisticTransaction);\n  };\n\n  InMemoryCache.prototype.transformDocument = function (document) {\n    if (this.addTypename) {\n      var result = this.typenameDocumentCache.get(document);\n\n      if (!result) {\n        result = addTypenameToDocument(document);\n        this.typenameDocumentCache.set(document, result);\n        this.typenameDocumentCache.set(result, result);\n      }\n\n      return result;\n    }\n\n    return document;\n  };\n\n  InMemoryCache.prototype.broadcastWatches = function (fromOptimisticTransaction) {\n    var _this = this;\n\n    if (!this.txCount) {\n      this.watches.forEach(function (c) {\n        return _this.maybeBroadcastWatch(c, fromOptimisticTransaction);\n      });\n    }\n  };\n\n  InMemoryCache.prototype.broadcastWatch = function (c, fromOptimisticTransaction) {\n    this.watchDep.dirty(c);\n    this.watchDep(c);\n    var diff = this.diff({\n      query: c.query,\n      variables: c.variables,\n      optimistic: c.optimistic\n    });\n\n    if (c.optimistic && fromOptimisticTransaction) {\n      diff.fromOptimisticTransaction = true;\n    }\n\n    c.callback(diff);\n  };\n\n  return InMemoryCache;\n}(ApolloCache);\n\nexport { InMemoryCache };","map":{"version":3,"sources":["../../../src/cache/inmemory/inMemoryCache.ts"],"names":[],"mappings":"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","sourcesContent":["// Make builtins like Map and Set safe to use with non-extensible objects.\nimport './fixPolyfills';\n\nimport { DocumentNode } from 'graphql';\nimport { dep, wrap } from 'optimism';\n\nimport { ApolloCache } from '../core/cache';\nimport { Cache } from '../core/types/Cache';\nimport { MissingFieldError } from '../core/types/common';\nimport {\n  addTypenameToDocument,\n  StoreObject,\n  Reference,\n  isReference,\n} from '../../utilities';\nimport {\n  ApolloReducerConfig,\n  NormalizedCacheObject,\n} from './types';\nimport { StoreReader } from './readFromStore';\nimport { StoreWriter } from './writeToStore';\nimport { EntityStore, supportsResultCaching } from './entityStore';\nimport { makeVar, forgetCache, recallCache } from './reactiveVars';\nimport {\n  defaultDataIdFromObject,\n  PossibleTypesMap,\n  Policies,\n  TypePolicies,\n} from './policies';\nimport { hasOwn } from './helpers';\n\nexport interface InMemoryCacheConfig extends ApolloReducerConfig {\n  resultCaching?: boolean;\n  possibleTypes?: PossibleTypesMap;\n  typePolicies?: TypePolicies;\n}\n\nconst defaultConfig: InMemoryCacheConfig = {\n  dataIdFromObject: defaultDataIdFromObject,\n  addTypename: true,\n  resultCaching: true,\n  typePolicies: {},\n};\n\nexport class InMemoryCache extends ApolloCache<NormalizedCacheObject> {\n  private data: EntityStore;\n  private optimisticData: EntityStore;\n\n  protected config: InMemoryCacheConfig;\n  private watches = new Set<Cache.WatchOptions>();\n  private addTypename: boolean;\n\n  private typenameDocumentCache = new Map<DocumentNode, DocumentNode>();\n  private storeReader: StoreReader;\n  private storeWriter: StoreWriter;\n\n  // Dynamically imported code can augment existing typePolicies or\n  // possibleTypes by calling cache.policies.addTypePolicies or\n  // cache.policies.addPossibletypes.\n  public readonly policies: Policies;\n\n  public readonly makeVar = makeVar;\n\n  constructor(config: InMemoryCacheConfig = {}) {\n    super();\n    this.config = { ...defaultConfig, ...config };\n    this.addTypename = !!this.config.addTypename;\n\n    this.policies = new Policies({\n      cache: this,\n      dataIdFromObject: this.config.dataIdFromObject,\n      possibleTypes: this.config.possibleTypes,\n      typePolicies: this.config.typePolicies,\n    });\n\n    // Passing { resultCaching: false } in the InMemoryCache constructor options\n    // will completely disable dependency tracking, which will improve memory\n    // usage but worsen the performance of repeated reads.\n    this.data = new EntityStore.Root({\n      policies: this.policies,\n      resultCaching: this.config.resultCaching,\n    });\n\n    // When no optimistic writes are currently active, cache.optimisticData ===\n    // cache.data, so there are no additional layers on top of the actual data.\n    // When an optimistic update happens, this.optimisticData will become a\n    // linked list of OptimisticCacheLayer objects that terminates with the\n    // original this.data cache object.\n    this.optimisticData = this.data;\n\n    this.storeWriter = new StoreWriter(\n      this,\n      this.storeReader = new StoreReader({\n        cache: this,\n        addTypename: this.addTypename,\n      }),\n    );\n  }\n\n  public restore(data: NormalizedCacheObject): this {\n    if (data) this.data.replace(data);\n    return this;\n  }\n\n  public extract(optimistic: boolean = false): NormalizedCacheObject {\n    return (optimistic ? this.optimisticData : this.data).extract();\n  }\n\n  public read<T>(options: Cache.ReadOptions): T | null {\n    const {\n      // Since read returns data or null, without any additional metadata\n      // about whether/where there might have been missing fields, the\n      // default behavior cannot be returnPartialData = true (like it is\n      // for the diff method), since defaulting to true would violate the\n      // integrity of the T in the return type. However, partial data may\n      // be useful in some cases, so returnPartialData:true may be\n      // specified explicitly.\n      returnPartialData = false,\n    } = options;\n    try {\n      return this.storeReader.diffQueryAgainstStore<T>({\n        store: options.optimistic ? this.optimisticData : this.data,\n        query: options.query,\n        variables: options.variables,\n        rootId: options.rootId,\n        config: this.config,\n        returnPartialData,\n      }).result || null;\n    } catch (e) {\n      if (e instanceof MissingFieldError) {\n        // Swallow MissingFieldError and return null, so callers do not\n        // need to worry about catching \"normal\" exceptions resulting from\n        // incomplete cache data. Unexpected errors will be re-thrown. If\n        // you need more information about which fields were missing, use\n        // cache.diff instead, and examine diffResult.missing.\n        return null;\n      }\n      throw e;\n    }\n  }\n\n  public write(options: Cache.WriteOptions): Reference | undefined {\n    try {\n      ++this.txCount;\n      return this.storeWriter.writeToStore({\n        store: this.data,\n        query: options.query,\n        result: options.result,\n        dataId: options.dataId,\n        variables: options.variables,\n      });\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public modify(options: Cache.ModifyOptions): boolean {\n    if (hasOwn.call(options, \"id\") && !options.id) {\n      // To my knowledge, TypeScript does not currently provide a way to\n      // enforce that an optional property?:type must *not* be undefined\n      // when present. That ability would be useful here, because we want\n      // options.id to default to ROOT_QUERY only when no options.id was\n      // provided. If the caller attempts to pass options.id with a\n      // falsy/undefined value (perhaps because cache.identify failed), we\n      // should not assume the goal was to modify the ROOT_QUERY object.\n      // We could throw, but it seems natural to return false to indicate\n      // that nothing was modified.\n      return false;\n    }\n    const store = options.optimistic // Defaults to false.\n      ? this.optimisticData\n      : this.data;\n    try {\n      ++this.txCount;\n      return store.modify(options.id || \"ROOT_QUERY\", options.fields);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public diff<T>(options: Cache.DiffOptions): Cache.DiffResult<T> {\n    return this.storeReader.diffQueryAgainstStore({\n      store: options.optimistic ? this.optimisticData : this.data,\n      rootId: options.id || \"ROOT_QUERY\",\n      query: options.query,\n      variables: options.variables,\n      returnPartialData: options.returnPartialData,\n      config: this.config,\n    });\n  }\n\n  public watch(watch: Cache.WatchOptions): () => void {\n    if (!this.watches.size) {\n      // In case we previously called forgetCache(this) because\n      // this.watches became empty (see below), reattach this cache to any\n      // reactive variables on which it previously depended. It might seem\n      // paradoxical that we're able to recall something we supposedly\n      // forgot, but the point of calling forgetCache(this) is to silence\n      // useless broadcasts while this.watches is empty, and to allow the\n      // cache to be garbage collected. If, however, we manage to call\n      // recallCache(this) here, this cache object must not have been\n      // garbage collected yet, and should resume receiving updates from\n      // reactive variables, now that it has a watcher to notify.\n      recallCache(this);\n    }\n    this.watches.add(watch);\n    if (watch.immediate) {\n      this.maybeBroadcastWatch(watch);\n    }\n    return () => {\n      // Once we remove the last watch from this.watches, cache.broadcastWatches\n      // no longer does anything, so we preemptively tell the reactive variable\n      // system to exclude this cache from future broadcasts.\n      if (this.watches.delete(watch) && !this.watches.size) {\n        forgetCache(this);\n      }\n      this.watchDep.dirty(watch);\n      // Remove this watch from the LRU cache managed by the\n      // maybeBroadcastWatch OptimisticWrapperFunction, to prevent memory\n      // leaks involving the closure of watch.callback.\n      this.maybeBroadcastWatch.forget(watch);\n    };\n  }\n\n  // Request garbage collection of unreachable normalized entities.\n  public gc() {\n    return this.optimisticData.gc();\n  }\n\n  // Call this method to ensure the given root ID remains in the cache after\n  // garbage collection, along with its transitive child entities. Note that\n  // the cache automatically retains all directly written entities. By default,\n  // the retainment persists after optimistic updates are removed. Pass true\n  // for the optimistic argument if you would prefer for the retainment to be\n  // discarded when the top-most optimistic layer is removed. Returns the\n  // resulting (non-negative) retainment count.\n  public retain(rootId: string, optimistic?: boolean): number {\n    return (optimistic ? this.optimisticData : this.data).retain(rootId);\n  }\n\n  // Call this method to undo the effect of the retain method, above. Once the\n  // retainment count falls to zero, the given ID will no longer be preserved\n  // during garbage collection, though it may still be preserved by other safe\n  // entities that refer to it. Returns the resulting (non-negative) retainment\n  // count, in case that's useful.\n  public release(rootId: string, optimistic?: boolean): number {\n    return (optimistic ? this.optimisticData : this.data).release(rootId);\n  }\n\n  // Returns the canonical ID for a given StoreObject, obeying typePolicies\n  // and keyFields (and dataIdFromObject, if you still use that). At minimum,\n  // the object must contain a __typename and any primary key fields required\n  // to identify entities of that type. If you pass a query result object, be\n  // sure that none of the primary key fields have been renamed by aliasing.\n  // If you pass a Reference object, its __ref ID string will be returned.\n  public identify(object: StoreObject | Reference): string | undefined {\n    return isReference(object) ? object.__ref :\n      this.policies.identify(object)[0];\n  }\n\n  public evict(options: Cache.EvictOptions): boolean {\n    if (!options.id) {\n      if (hasOwn.call(options, \"id\")) {\n        // See comment in modify method about why we return false when\n        // options.id exists but is falsy/undefined.\n        return false;\n      }\n      options = { ...options, id: \"ROOT_QUERY\" };\n    }\n    try {\n      // It's unlikely that the eviction will end up invoking any other\n      // cache update operations while it's running, but {in,de}crementing\n      // this.txCount still seems like a good idea, for uniformity with\n      // the other update methods.\n      ++this.txCount;\n      return this.optimisticData.evict(options);\n    } finally {\n      if (!--this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  }\n\n  public reset(): Promise<void> {\n    this.data.clear();\n    this.optimisticData = this.data;\n    this.broadcastWatches();\n    return Promise.resolve();\n  }\n\n  public removeOptimistic(idToRemove: string) {\n    const newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n    if (newOptimisticData !== this.optimisticData) {\n      this.optimisticData = newOptimisticData;\n      this.broadcastWatches();\n    }\n  }\n\n  private txCount = 0;\n\n  public performTransaction(\n    transaction: (cache: InMemoryCache) => any,\n    optimisticId?: string | null,\n  ) {\n    const perform = (layer?: EntityStore) => {\n      const { data, optimisticData } = this;\n      ++this.txCount;\n      if (layer) {\n        this.data = this.optimisticData = layer;\n      }\n      try {\n        transaction(this);\n      } finally {\n        --this.txCount;\n        this.data = data;\n        this.optimisticData = optimisticData;\n      }\n    };\n\n    let fromOptimisticTransaction = false;\n\n    if (typeof optimisticId === 'string') {\n      // Note that there can be multiple layers with the same optimisticId.\n      // When removeOptimistic(id) is called for that id, all matching layers\n      // will be removed, and the remaining layers will be reapplied.\n      this.optimisticData = this.optimisticData.addLayer(optimisticId, perform);\n      fromOptimisticTransaction = true;\n    } else if (optimisticId === null) {\n      // Ensure both this.data and this.optimisticData refer to the root\n      // (non-optimistic) layer of the cache during the transaction. Note\n      // that this.data could be a Layer if we are currently executing an\n      // optimistic transaction function, but otherwise will always be an\n      // EntityStore.Root instance.\n      perform(this.data);\n    } else {\n      // Otherwise, leave this.data and this.optimisticData unchanged and\n      // run the transaction with broadcast batching.\n      perform();\n    }\n\n    // This broadcast does nothing if this.txCount > 0.\n    this.broadcastWatches(fromOptimisticTransaction);\n  }\n\n  public transformDocument(document: DocumentNode): DocumentNode {\n    if (this.addTypename) {\n      let result = this.typenameDocumentCache.get(document);\n      if (!result) {\n        result = addTypenameToDocument(document);\n        this.typenameDocumentCache.set(document, result);\n        // If someone calls transformDocument and then mistakenly passes the\n        // result back into an API that also calls transformDocument, make sure\n        // we don't keep creating new query documents.\n        this.typenameDocumentCache.set(result, result);\n      }\n      return result;\n    }\n    return document;\n  }\n\n  protected broadcastWatches(fromOptimisticTransaction?: boolean) {\n    if (!this.txCount) {\n      this.watches.forEach(c => this.maybeBroadcastWatch(c, fromOptimisticTransaction));\n    }\n  }\n\n  private maybeBroadcastWatch = wrap((\n    c: Cache.WatchOptions,\n    fromOptimisticTransaction?: boolean,\n  ) => {\n    return this.broadcastWatch.call(this, c, !!fromOptimisticTransaction);\n  }, {\n    makeCacheKey: (c: Cache.WatchOptions) => {\n      // Return a cache key (thus enabling result caching) only if we're\n      // currently using a data store that can track cache dependencies.\n      const store = c.optimistic ? this.optimisticData : this.data;\n      if (supportsResultCaching(store)) {\n        const { optimistic, rootId, variables } = c;\n        return store.makeCacheKey(\n          c.query,\n          // Different watches can have the same query, optimistic\n          // status, rootId, and variables, but if their callbacks are\n          // different, the (identical) result needs to be delivered to\n          // each distinct callback. The easiest way to achieve that\n          // separation is to include c.callback in the cache key for\n          // maybeBroadcastWatch calls. See issue #5733.\n          c.callback,\n          JSON.stringify({ optimistic, rootId, variables }),\n        );\n      }\n    }\n  });\n\n  private watchDep = dep<Cache.WatchOptions>();\n\n  // This method is wrapped by maybeBroadcastWatch, which is called by\n  // broadcastWatches, so that we compute and broadcast results only when\n  // the data that would be broadcast might have changed. It would be\n  // simpler to check for changes after recomputing a result but before\n  // broadcasting it, but this wrapping approach allows us to skip both\n  // the recomputation and the broadcast, in most cases.\n  private broadcastWatch(\n    c: Cache.WatchOptions,\n    fromOptimisticTransaction: boolean,\n  ) {\n    // First, invalidate any other maybeBroadcastWatch wrapper functions\n    // currently depending on this Cache.WatchOptions object (including\n    // the one currently calling broadcastWatch), so they will be included\n    // in the next broadcast, even if the result they receive is the same\n    // as the previous result they received. This is important because we\n    // are about to deliver a different result to c.callback, so any\n    // previous results should have a chance to be redelivered.\n    this.watchDep.dirty(c);\n\n    // Next, re-depend on this.watchDep for just this invocation of\n    // maybeBroadcastWatch (this is a no-op if broadcastWatch was not\n    // called by maybeBroadcastWatch). This allows only the most recent\n    // maybeBroadcastWatch invocation for this watcher to remain cached,\n    // enabling re-broadcast of previous results even if they have not\n    // changed since they were previously delivered.\n    this.watchDep(c);\n\n    const diff = this.diff<any>({\n      query: c.query,\n      variables: c.variables,\n      optimistic: c.optimistic,\n    });\n\n    if (c.optimistic && fromOptimisticTransaction) {\n      diff.fromOptimisticTransaction = true;\n    }\n\n    c.callback(diff);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}