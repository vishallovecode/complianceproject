{"ast":null,"code":"import { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\nimport { parser, operationName } from \"../parser/index.js\";\n\nvar OperationData = function () {\n  function OperationData(options, context) {\n    this.isMounted = false;\n    this.previousOptions = {};\n    this.context = {};\n    this.options = {};\n    this.options = options || {};\n    this.context = context || {};\n  }\n\n  OperationData.prototype.getOptions = function () {\n    return this.options;\n  };\n\n  OperationData.prototype.setOptions = function (newOptions, storePrevious) {\n    if (storePrevious === void 0) {\n      storePrevious = false;\n    }\n\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n\n    this.options = newOptions;\n  };\n\n  OperationData.prototype.unmount = function () {\n    this.isMounted = false;\n  };\n\n  OperationData.prototype.refreshClient = function () {\n    var client = this.options && this.options.client || this.context && this.context.client;\n    process.env.NODE_ENV === \"production\" ? invariant(!!client, 29) : invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' + 'Wrap the root component in an <ApolloProvider>, or pass an ' + 'ApolloClient instance in via options.');\n    var isNew = false;\n\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n\n    return {\n      client: this.client,\n      isNew: isNew\n    };\n  };\n\n  OperationData.prototype.verifyDocumentType = function (document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    process.env.NODE_ENV === \"production\" ? invariant(operation.type === type, 30) : invariant(operation.type === type, \"Running a \" + requiredOperationName + \" requires a graphql \" + (requiredOperationName + \", but a \" + usedOperationName + \" was used instead.\"));\n  };\n\n  return OperationData;\n}();\n\nexport { OperationData };","map":{"version":3,"sources":["../../../src/react/data/OperationData.ts"],"names":[],"mappings":"AACA,SAAS,KAAT,QAAsB,eAAtB;AACA,SAAS,SAAT,QAA0B,cAA1B;AAGA,SAAuB,MAAvB,EAA+B,aAA/B,QAAoD,oBAApD;;AAGA,IAAA,aAAA,GAAA,YAAA;EAUE,SAAA,aAAA,CAAY,OAAZ,EAA+C,OAA/C,EAA4D;IATrD,KAAA,SAAA,GAAqB,KAArB;IACA,KAAA,eAAA,GAA2C,EAA3C;IAGA,KAAA,OAAA,GAAe,EAAf;IAGC,KAAA,OAAA,GAAmC,EAAnC;IAGN,KAAK,OAAL,GAAe,OAAO,IAAK,EAA3B;IACA,KAAK,OAAL,GAAe,OAAO,IAAI,EAA1B;EACD;;EAEM,aAAA,CAAA,SAAA,CAAA,UAAA,GAAP,YAAA;IACE,OAAO,KAAK,OAAZ;EACD,CAFM;;EAIA,aAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UACE,UADF,EAEE,aAFF,EAEgC;IAA9B,IAAA,aAAA,KAAA,KAAA,CAAA,EAAA;MAAA,aAAA,GAAA,KAAA;IAA8B;;IAE9B,IAAI,aAAa,IAAI,CAAC,KAAK,CAAC,KAAK,OAAN,EAAe,UAAf,CAA3B,EAAuD;MACrD,KAAK,eAAL,GAAuB,KAAK,OAA5B;IACD;;IACD,KAAK,OAAL,GAAe,UAAf;EACD,CARM;;EAcG,aAAA,CAAA,SAAA,CAAA,OAAA,GAAV,YAAA;IACE,KAAK,SAAL,GAAiB,KAAjB;EACD,CAFS;;EAIA,aAAA,CAAA,SAAA,CAAA,aAAA,GAAV,YAAA;IACE,IAAM,MAAM,GACT,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,MAA9B,IACC,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,MAFhC;IAIA,OAAA,CAAA,GAAA,CACI,QADJ,KAEE,YAFF,GAEE,SAAA,CAAA,CAAA,CAAA,MAAA,EAAA,EAAA,CAFF,GAEE,SAAA,CAAA,CAAA,CAAA,MAAA,EAAA,uEACE,6DADF,GAEE,uCAFF,CAFF;IAOA,IAAI,KAAK,GAAG,KAAZ;;IACA,IAAI,MAAM,KAAK,KAAK,MAApB,EAA4B;MAC1B,KAAK,GAAG,IAAR;MACA,KAAK,MAAL,GAAc,MAAd;MACA,KAAK,OAAL;IACD;;IACD,OAAO;MACL,MAAM,EAAE,KAAK,MADR;MAEL,KAAK,EAAA;IAFA,CAAP;EAID,CAtBS;;EAwBA,aAAA,CAAA,SAAA,CAAA,kBAAA,GAAV,UAA6B,QAA7B,EAAqD,IAArD,EAAuE;IACrE,IAAM,SAAS,GAAG,MAAM,CAAC,QAAD,CAAxB;IACA,IAAM,qBAAqB,GAAG,aAAa,CAAC,IAAD,CAA3C;IACA,IAAM,iBAAiB,GAAG,aAAa,CAAC,SAAS,CAAC,IAAX,CAAvC;IACA,OAAA,CAAA,GAAA,CACE,QADF,KACgB,YADhB,GAEE,SAAA,CAAa,SAAA,CAAA,IAAA,KAAA,IAAb,EAAkC,EAAlC,CAFF,GAEoC,SAAA,CAAA,SAAsB,CAAA,IAAtB,KAAsB,IAAtB,EAAsB,eAAA,qBAAA,GAAA,sBAAA,IACnD,qBAAqB,GAAA,UAArB,GAAgC,iBAAhC,GAAiD,oBADE,CAAtB,CAFpC;EAKD,CATS;;EAUZ,OAAA,aAAA;AAAC,CAvED,EAAA","sourcesContent":["import { DocumentNode } from 'graphql';\nimport { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\n\nimport { ApolloClient } from '../../core';\nimport { DocumentType, parser, operationName } from '../parser';\nimport { CommonOptions } from '../types/types';\n\nexport abstract class OperationData<TOptions = any> {\n  public isMounted: boolean = false;\n  public previousOptions: CommonOptions<TOptions> = {} as CommonOptions<\n    TOptions\n  >;\n  public context: any = {};\n  public client: ApolloClient<object>;\n\n  private options: CommonOptions<TOptions> = {} as CommonOptions<TOptions>;\n\n  constructor(options?: CommonOptions<TOptions>, context?: any) {\n    this.options = options || ({} as CommonOptions<TOptions>);\n    this.context = context || {};\n  }\n\n  public getOptions(): CommonOptions<TOptions> {\n    return this.options;\n  }\n\n  public setOptions(\n    newOptions: CommonOptions<TOptions>,\n    storePrevious: boolean = false\n  ) {\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  }\n\n  public abstract execute(...args: any): any;\n  public abstract afterExecute(...args: any): void | (() => void);\n  public abstract cleanup(): void;\n\n  protected unmount() {\n    this.isMounted = false;\n  }\n\n  protected refreshClient() {\n    const client =\n      (this.options && this.options.client) ||\n      (this.context && this.context.client);\n\n    invariant(\n      !!client,\n      'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ' +\n        'ApolloClient instance in via options.'\n    );\n\n    let isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client as ApolloClient<object>,\n      isNew\n    };\n  }\n\n  protected verifyDocumentType(document: DocumentNode, type: DocumentType) {\n    const operation = parser(document);\n    const requiredOperationName = operationName(type);\n    const usedOperationName = operationName(operation.type);\n    invariant(\n      operation.type === type,\n      `Running a ${requiredOperationName} requires a graphql ` +\n        `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}