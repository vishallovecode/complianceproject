{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { equal } from '@wry/equality';\nimport { OperationData } from \"./OperationData.js\";\n\nvar SubscriptionData = function (_super) {\n  __extends(SubscriptionData, _super);\n\n  function SubscriptionData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.currentObservable = {};\n    _this.setResult = setResult;\n\n    _this.initialize(options);\n\n    return _this;\n  }\n\n  SubscriptionData.prototype.execute = function (result) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    var currentResult = result;\n\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    var shouldResubscribe = this.getOptions().shouldResubscribe;\n\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (shouldResubscribe !== false && this.previousOptions && Object.keys(this.previousOptions).length > 0 && (this.previousOptions.subscription !== this.getOptions().subscription || !equal(this.previousOptions.variables, this.getOptions().variables) || this.previousOptions.skip !== this.getOptions().skip)) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n    this.previousOptions = this.getOptions();\n    return __assign(__assign({}, currentResult), {\n      variables: this.getOptions().variables\n    });\n  };\n\n  SubscriptionData.prototype.afterExecute = function () {\n    this.isMounted = true;\n  };\n\n  SubscriptionData.prototype.cleanup = function () {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  };\n\n  SubscriptionData.prototype.initialize = function (options) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy,\n      context: options.context\n    });\n  };\n\n  SubscriptionData.prototype.startSubscription = function () {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query.subscribe({\n      next: this.updateCurrentData.bind(this),\n      error: this.updateError.bind(this),\n      complete: this.completeSubscription.bind(this)\n    });\n  };\n\n  SubscriptionData.prototype.getLoadingResult = function () {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  };\n\n  SubscriptionData.prototype.updateResult = function (result) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  };\n\n  SubscriptionData.prototype.updateCurrentData = function (result) {\n    var onSubscriptionData = this.getOptions().onSubscriptionData;\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  };\n\n  SubscriptionData.prototype.updateError = function (error) {\n    this.updateResult({\n      error: error,\n      loading: false\n    });\n  };\n\n  SubscriptionData.prototype.completeSubscription = function () {\n    var _this = this;\n\n    Promise.resolve().then(function () {\n      var onSubscriptionComplete = _this.getOptions().onSubscriptionComplete;\n\n      if (onSubscriptionComplete) onSubscriptionComplete();\n\n      _this.endSubscription();\n    });\n  };\n\n  SubscriptionData.prototype.endSubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n\n  return SubscriptionData;\n}(OperationData);\n\nexport { SubscriptionData };","map":{"version":3,"sources":["../../../src/react/data/SubscriptionData.ts"],"names":[],"mappings":"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","sourcesContent":["import { equal } from '@wry/equality';\n\nimport { OperationData } from './OperationData';\nimport {\n  SubscriptionCurrentObservable,\n  SubscriptionDataOptions,\n  SubscriptionResult\n} from '../types/types';\n\nexport class SubscriptionData<\n  TData = any,\n  TVariables = any\n> extends OperationData<SubscriptionDataOptions<TData, TVariables>> {\n  private setResult: any;\n  private currentObservable: SubscriptionCurrentObservable = {};\n\n  constructor({\n    options,\n    context,\n    setResult\n  }: {\n    options: SubscriptionDataOptions<TData, TVariables>;\n    context: any;\n    setResult: any;\n  }) {\n    super(options, context);\n    this.setResult = setResult;\n    this.initialize(options);\n  }\n\n  public execute(result: SubscriptionResult<TData>) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    let currentResult = result;\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    let { shouldResubscribe } = this.getOptions();\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (\n      shouldResubscribe !== false &&\n      this.previousOptions &&\n      Object.keys(this.previousOptions).length > 0 &&\n      (this.previousOptions.subscription !== this.getOptions().subscription ||\n        !equal(this.previousOptions.variables, this.getOptions().variables) ||\n        this.previousOptions.skip !== this.getOptions().skip)\n    ) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n\n    this.previousOptions = this.getOptions();\n    return { ...currentResult, variables: this.getOptions().variables };\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n  }\n\n  public cleanup() {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  }\n\n  private initialize(options: SubscriptionDataOptions<TData, TVariables>) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy,\n      context: options.context,\n    });\n  }\n\n  private startSubscription() {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query!.subscribe(\n      {\n        next: this.updateCurrentData.bind(this),\n        error: this.updateError.bind(this),\n        complete: this.completeSubscription.bind(this)\n      }\n    );\n  }\n\n  private getLoadingResult() {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    } as SubscriptionResult<TData>;\n  }\n\n  private updateResult(result: SubscriptionResult) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  }\n\n  private updateCurrentData(result: SubscriptionResult<TData>) {\n    const { onSubscriptionData } = this.getOptions();\n\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  }\n\n  private updateError(error: any) {\n    this.updateResult({\n      error,\n      loading: false\n    });\n  }\n\n  private completeSubscription() {\n    // We have to defer this endSubscription call, because otherwise multiple\n    // subscriptions for the same component will cause infinite rendering.\n    // See https://github.com/apollographql/apollo-client/pull/7917\n    Promise.resolve().then(() => {\n      const { onSubscriptionComplete } = this.getOptions();\n      if (onSubscriptionComplete) onSubscriptionComplete();\n      this.endSubscription();\n    });\n  }\n\n  private endSubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}