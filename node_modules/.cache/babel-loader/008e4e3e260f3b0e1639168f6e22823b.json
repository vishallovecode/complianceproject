{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { useContext, useState, useRef, useEffect } from 'react';\nimport { SubscriptionData } from \"../data/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nexport function useSubscription(subscription, options) {\n  var context = useContext(getApolloContext());\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    subscription: subscription\n  }) : {\n    subscription: subscription\n  };\n\n  var _a = useState({\n    loading: !updatedOptions.skip,\n    error: undefined,\n    data: undefined\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var subscriptionDataRef = useRef();\n\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData({\n        options: updatedOptions,\n        context: context,\n        setResult: setResult\n      });\n    }\n\n    return subscriptionDataRef.current;\n  }\n\n  var subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n  useEffect(function () {\n    return subscriptionData.afterExecute();\n  });\n  useEffect(function () {\n    return subscriptionData.cleanup.bind(subscriptionData);\n  }, []);\n  return subscriptionData.execute(result);\n}","map":{"version":3,"sources":["../../../src/react/hooks/useSubscription.ts"],"names":[],"mappings":";AAAA,SAAS,UAAT,EAAqB,QAArB,EAA+B,MAA/B,EAAuC,SAAvC,QAAwD,OAAxD;AAKA,SAAS,gBAAT,QAAiC,kBAAjC;AAEA,SAAS,gBAAT,QAAiC,qBAAjC;AAEA,OAAM,SAAU,eAAV,CACJ,YADI,EAEJ,OAFI,EAEgD;EAEpD,IAAM,OAAO,GAAG,UAAU,CAAC,gBAAgB,EAAjB,CAA1B;EACA,IAAM,cAAc,GAAG,OAAO,GAC3B,QAAA,CAAA,QAAA,CAAA,EAAA,EAAM,OAAN,CAAA,EAAa;IAAE,YAAY,EAAA;EAAd,CAAb,CAD2B,GAE1B;IAAE,YAAY,EAAA;EAAd,CAFJ;;EAGM,IAAA,EAAA,GAAsB,QAAQ,CAAC;IACnC,OAAO,EAAE,CAAC,cAAc,CAAC,IADU;IAEnC,KAAK,EAAE,SAF4B;IAGnC,IAAI,EAAE;EAH6B,CAAD,CAA9B;EAAA,IAAC,MAAM,GAAA,EAAA,CAAA,CAAA,CAAP;EAAA,IAAS,SAAS,GAAA,EAAA,CAAA,CAAA,CAAlB;;EAMN,IAAM,mBAAmB,GAAG,MAAM,EAAlC;;EACA,SAAS,sBAAT,GAA+B;IAC7B,IAAI,CAAC,mBAAmB,CAAC,OAAzB,EAAkC;MAChC,mBAAmB,CAAC,OAApB,GAA8B,IAAI,gBAAJ,CAAwC;QACpE,OAAO,EAAE,cAD2D;QAEpE,OAAO,EAAA,OAF6D;QAGpE,SAAS,EAAA;MAH2D,CAAxC,CAA9B;IAKD;;IACD,OAAO,mBAAmB,CAAC,OAA3B;EACD;;EAED,IAAM,gBAAgB,GAAG,sBAAsB,EAA/C;EACA,gBAAgB,CAAC,UAAjB,CAA4B,cAA5B,EAA4C,IAA5C;EACA,gBAAgB,CAAC,OAAjB,GAA2B,OAA3B;EAEA,SAAS,CAAC,YAAA;IAAM,OAAA,gBAAgB,CAAhB,YAAA,EAAA;EAA+B,CAAtC,CAAT;EACA,SAAS,CAAC,YAAA;IAAM,OAAA,gBAAgB,CAAC,OAAjB,CAAyB,IAAzB,CAAA,gBAAA,CAAA;EAA+C,CAAtD,EAAwD,EAAxD,CAAT;EAEA,OAAO,gBAAgB,CAAC,OAAjB,CAAyB,MAAzB,CAAP;AACD","sourcesContent":["import { useContext, useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { SubscriptionHookOptions } from '../types/types';\nimport { SubscriptionData } from '../data';\nimport { OperationVariables } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SubscriptionHookOptions<TData, TVariables>\n) {\n  const context = useContext(getApolloContext());\n  const updatedOptions = options\n    ? { ...options, subscription }\n    : { subscription };\n  const [result, setResult] = useState({\n    loading: !updatedOptions.skip,\n    error: undefined,\n    data: undefined\n  });\n\n  const subscriptionDataRef = useRef<SubscriptionData<TData, TVariables>>();\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        setResult\n      });\n    }\n    return subscriptionDataRef.current;\n  }\n\n  const subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n\n  useEffect(() => subscriptionData.afterExecute());\n  useEffect(() => subscriptionData.cleanup.bind(subscriptionData), []);\n\n  return subscriptionData.execute(result);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}